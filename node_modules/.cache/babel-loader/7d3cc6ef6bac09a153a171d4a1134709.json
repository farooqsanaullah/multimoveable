{"ast":null,"code":"/*\nCopyright (c) 2019 Daybrush\nname: react-css-styler\nlicense: MIT\nauthor: Daybrush\nrepository: https://github.com/daybrush/css-styler/tree/master/react-css-styler\nversion: 0.4.1\n*/\nimport { createElement, Component } from 'react';\nimport { findDOMNode } from 'react-dom';\nimport { splitComma } from '@daybrush/utils';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\n\nvar _extendStatics = function extendStatics(d, b) {\n  _extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return _extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  _extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nvar _assign = function __assign() {\n  _assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return _assign.apply(this, arguments);\n};\n\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\n\nfunction hash(str) {\n  var hash = 5381,\n      i = str.length;\n\n  while (i) {\n    hash = hash * 33 ^ str.charCodeAt(--i);\n  }\n  /* JavaScript does bitwise operations (like XOR, above) on 32-bit signed\n   * integers. Since we want the results to be always positive, convert the\n   * signed int to an unsigned by doing an unsigned bitshift. */\n\n\n  return hash >>> 0;\n}\n\nvar stringHash = hash;\n\nfunction getHash(str) {\n  return stringHash(str).toString(36);\n}\n\nfunction injectStyle(className, css) {\n  var style = document.createElement(\"style\");\n  style.setAttribute(\"type\", \"text/css\");\n  style.innerHTML = css.replace(/([^}{]*){/mg, function (all, selector) {\n    return splitComma(selector).map(function (subSelector) {\n      if (subSelector.indexOf(\":global\") > -1) {\n        return subSelector.replace(/\\:global/g, \"\");\n      } else if (subSelector.indexOf(\":host\") > -1) {\n        return \"\" + subSelector.replace(/\\:host/g, \".\" + className);\n      }\n\n      return \".\" + className + \" \" + subSelector;\n    }).join(\", \") + \"{\";\n  });\n  (document.head || document.body).appendChild(style);\n  return style;\n}\n\nfunction styled(Tag, css) {\n  var injectClassName = \"rCS\" + getHash(css);\n  var injectCount = 0;\n  var injectElement;\n  return /*#__PURE__*/function (_super) {\n    __extends(Styler, _super);\n\n    function Styler(props) {\n      return _super.call(this, props) || this;\n    }\n\n    Styler.prototype.render = function () {\n      var _a = this.props,\n          className = _a.className,\n          attributes = __rest(_a, [\"className\"]);\n\n      return createElement(Tag, _assign({\n        className: className + \" \" + injectClassName\n      }, attributes));\n    };\n\n    Styler.prototype.componentDidMount = function () {\n      if (injectCount === 0) {\n        injectElement = injectStyle(injectClassName, css);\n      }\n\n      ++injectCount;\n    };\n\n    Styler.prototype.componentWillUnmount = function () {\n      --injectCount;\n\n      if (injectCount === 0 && injectElement) {\n        injectElement.parentNode.removeChild(injectElement);\n      }\n    };\n\n    Styler.prototype.getElement = function () {\n      return this.element || (this.element = findDOMNode(this));\n    };\n\n    return Styler;\n  }(Component);\n}\n\nexport default styled;","map":null,"metadata":{},"sourceType":"module"}