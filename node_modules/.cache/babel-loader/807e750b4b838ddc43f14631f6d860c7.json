{"ast":null,"code":"/*\nCopyright (c) 2019 Daybrush\nname: react-moveable\nlicense: MIT\nauthor: Daybrush\nrepository: https://github.com/daybrush/moveable/blob/master/packages/react-moveable\nversion: 0.13.10\n*/\nimport * as React from 'react';\nimport { createElement, PureComponent } from 'react';\nimport { prefixCSS, prefixNames, ref, refs } from 'framework-utils';\nimport getAgent from '@egjs/agent';\nimport { isUndefined, splitUnit, isObject, splitBracket, isFunction, hasClass, isArray, dot, addClass, findIndex, removeClass } from '@daybrush/utils';\nimport { createIdentityMatrix, plus, getRad, getOrigin, multiplies, createOriginMatrix, convertCSStoMatrix, convertDimension, multiply, convertMatrixtoCSS, createScaleMatrix, caculate, convertPositionMatrix, minus, invert, average, rotate, createRotateMatrix, ignoreDimension, createWarpMatrix, multiplyCSS } from '@moveable/matrix';\nimport styler from 'react-css-styler';\nimport Dragger from '@daybrush/drag';\nimport ChildrenDiffer from '@egjs/children-differ';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\n\nvar _extendStatics = function extendStatics(d, b) {\n  _extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return _extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  _extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nvar _assign = function __assign() {\n  _assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return _assign.apply(this, arguments);\n};\n\nvar agent = getAgent();\nvar isWebkit = agent.os.name.indexOf(\"ios\") > -1 || agent.browser.name.indexOf(\"safari\") > -1;\nvar PREFIX = \"moveable-\";\nvar MOVEABLE_CSS = prefixCSS(PREFIX, \"\\n{\\n\\tposition: fixed;\\n\\twidth: 0;\\n\\theight: 0;\\n\\tleft: 0;\\n\\ttop: 0;\\n\\tz-index: 3000;\\n}\\n.control-box {\\n    z-index: 0;\\n}\\n.line, .control {\\n\\tleft: 0;\\n\\ttop: 0;\\n}\\n.control {\\n\\tposition: absolute;\\n\\twidth: 14px;\\n\\theight: 14px;\\n\\tborder-radius: 50%;\\n\\tborder: 2px solid #fff;\\n\\tbox-sizing: border-box;\\n\\tbackground: #4af;\\n\\tmargin-top: -7px;\\n    margin-left: -7px;\\n    z-index: 10;\\n}\\n.line {\\n\\tposition: absolute;\\n\\twidth: 1px;\\n\\theight: 1px;\\n\\tbackground: #4af;\\n\\ttransform-origin: 0px 0.5px;\\n}\\n.line.rotation-line {\\n\\theight: 40px;\\n\\twidth: 1px;\\n\\ttransform-origin: 0.5px 39.5px;\\n}\\n.line.rotation-line .control {\\n\\tborder-color: #4af;\\n\\tbackground:#fff;\\n\\tcursor: alias;\\n}\\n.line.vertical.bold {\\n    width: 2px;\\n    margin-left: -1px;\\n}\\n.line.horizontal.bold {\\n    height: 2px;\\n    margin-top: -1px;\\n}\\n.control.origin {\\n\\tborder-color: #f55;\\n\\tbackground: #fff;\\n\\twidth: 12px;\\n\\theight: 12px;\\n\\tmargin-top: -6px;\\n\\tmargin-left: -6px;\\n\\tpointer-events: none;\\n}\\n.direction.e, .direction.w {\\n\\tcursor: ew-resize;\\n}\\n.direction.s, .direction.n {\\n\\tcursor: ns-resize;\\n}\\n.direction.nw, .direction.se, :host.reverse .direction.ne, :host.reverse .direction.sw {\\n\\tcursor: nwse-resize;\\n}\\n.direction.ne, .direction.sw, :host.reverse .direction.nw, :host.reverse .direction.se {\\n\\tcursor: nesw-resize;\\n}\\n.group {\\n    z-index: -1;\\n}\\n.area {\\n    position: absolute;\\n}\\n.area-pieces {\\n    position: absolute;\\n    top: 0;\\n    left: 0;\\n    display: none;\\n}\\n.area.avoid {\\n    pointer-events: none;\\n}\\n.area.avoid+.area-pieces {\\n    display: block;\\n}\\n.area-piece {\\n    position: absolute;\\n}\\n\" + (isWebkit ? \":global svg *:before {\\n\\tcontent:\\\"\\\";\\n\\ttransform-origin: inherit;\\n}\" : \"\") + \"\\n\");\nvar NEARBY_POS = [[0, 1, 2], [1, 0, 3], [2, 0, 3], [3, 1, 2]];\nvar TINY_NUM = 0.0000001;\nvar MIN_SCALE = 0.000000001;\nvar MAX_NUM = Math.pow(10, 10);\nvar MIN_NUM = -MAX_NUM;\nvar DIRECTION_INDEXES = {\n  n: [0, 1],\n  s: [2, 3],\n  w: [2, 0],\n  e: [1, 3],\n  nw: [0],\n  ne: [1],\n  sw: [2],\n  se: [3]\n};\n\nfunction multiply2(pos1, pos2) {\n  return [pos1[0] * pos2[0], pos1[1] * pos2[1]];\n}\n\nfunction prefix() {\n  var classNames = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    classNames[_i] = arguments[_i];\n  }\n\n  return prefixNames.apply(void 0, [PREFIX].concat(classNames));\n}\n\nfunction createIdentityMatrix3() {\n  return createIdentityMatrix(3);\n}\n\nfunction getTransformMatrix(transform) {\n  if (!transform || transform === \"none\") {\n    return [1, 0, 0, 1, 0, 0];\n  }\n\n  if (isObject(transform)) {\n    return transform;\n  }\n\n  var value = splitBracket(transform).value;\n  return value.split(/s*,\\s*/g).map(function (v) {\n    return parseFloat(v);\n  });\n}\n\nfunction getAbsoluteMatrix(matrix, n, origin) {\n  return multiplies(n, createOriginMatrix(origin, n), matrix, createOriginMatrix(origin.map(function (a) {\n    return -a;\n  }), n));\n}\n\nfunction measureSVGSize(el, unit, isHorizontal) {\n  if (unit === \"%\") {\n    var viewBox = el.ownerSVGElement.viewBox.baseVal;\n    return viewBox[isHorizontal ? \"width\" : \"height\"] / 100;\n  }\n\n  return 1;\n}\n\nfunction getBeforeTransformOrigin(el) {\n  var relativeOrigin = getTransformOrigin(getComputedStyle(el, \":before\"));\n  return relativeOrigin.map(function (o, i) {\n    var _a = splitUnit(o),\n        value = _a.value,\n        unit = _a.unit;\n\n    return value * measureSVGSize(el, unit, i === 0);\n  });\n}\n\nfunction getTransformOrigin(style) {\n  var transformOrigin = style.transformOrigin;\n  return transformOrigin ? transformOrigin.split(\" \") : [\"0\", \"0\"];\n}\n\nfunction getOffsetInfo(el, lastParent, isParent) {\n  var body = document.body;\n  var target = !el || isParent ? el : el.parentElement;\n  var isEnd = false;\n  var position = \"relative\";\n\n  while (target && target !== body) {\n    if (lastParent === target) {\n      isEnd = true;\n    }\n\n    var style = getComputedStyle(target);\n    var transform = style.transform;\n    position = style.position;\n\n    if (position !== \"static\" || transform && transform !== \"none\") {\n      break;\n    }\n\n    target = target.parentElement;\n    position = \"relative\";\n  }\n\n  return {\n    isStatic: position === \"static\",\n    isEnd: isEnd || !target || target === body,\n    offsetParent: target || body\n  };\n}\n\nfunction caculateMatrixStack(target, container, prevMatrix, prevN) {\n  var _a;\n\n  var el = target;\n  var matrixes = [];\n  var isSVGGraphicElement = el.tagName.toLowerCase() !== \"svg\" && \"ownerSVGElement\" in el;\n  var originalContainer = container || document.body;\n  var isEnd = false;\n  var is3d = false;\n  var n = 3;\n  var transformOrigin;\n  var targetMatrix;\n\n  if (prevMatrix) {\n    container = target.parentElement;\n  }\n\n  while (el && !isEnd) {\n    var style = getComputedStyle(el);\n    var tagName = el.tagName.toLowerCase();\n    var position = style.position;\n    var isFixed = position === \"fixed\";\n    var styleTransform = style.transform;\n    var matrix = convertCSStoMatrix(getTransformMatrix(styleTransform));\n\n    if (!is3d && matrix.length === 16) {\n      is3d = true;\n      n = 4;\n      var matrixesLength = matrixes.length;\n\n      for (var i = 0; i < matrixesLength; ++i) {\n        matrixes[i] = convertDimension(matrixes[i], 3, 4);\n      }\n    }\n\n    if (is3d && matrix.length === 9) {\n      matrix = convertDimension(matrix, 3, 4);\n    }\n\n    var offsetLeft = el.offsetLeft;\n    var offsetTop = el.offsetTop;\n\n    if (isFixed) {\n      var containerRect = (container || document.documentElement).getBoundingClientRect();\n      offsetLeft -= containerRect.left;\n      offsetTop -= containerRect.top;\n    } // svg\n\n\n    var isSVG = isUndefined(offsetLeft);\n    var hasNotOffset = isSVG;\n    var origin = void 0; // inner svg element\n\n    if (hasNotOffset && tagName !== \"svg\") {\n      origin = isWebkit ? getBeforeTransformOrigin(el) : getTransformOrigin(style).map(function (pos) {\n        return parseFloat(pos);\n      });\n      hasNotOffset = false;\n\n      if (tagName === \"g\") {\n        offsetLeft = 0;\n        offsetTop = 0;\n      } else {\n        _a = getSVGGraphicsOffset(el, origin), offsetLeft = _a[0], offsetTop = _a[1], origin[0] = _a[2], origin[1] = _a[3];\n      }\n    } else {\n      origin = getTransformOrigin(style).map(function (pos) {\n        return parseFloat(pos);\n      });\n    }\n\n    if (tagName === \"svg\" && targetMatrix) {\n      matrixes.push(getSVGMatrix(el, n), createIdentityMatrix(n));\n    }\n\n    var _b = getOffsetInfo(el, container),\n        offsetParent = _b.offsetParent,\n        isOffsetEnd = _b.isEnd,\n        isStatic = _b.isStatic;\n\n    if (isWebkit && !hasNotOffset && !isSVG && isStatic && position === \"relative\") {\n      offsetLeft -= offsetParent.offsetLeft;\n      offsetTop -= offsetParent.offsetTop;\n      isEnd = isEnd || isOffsetEnd;\n    }\n\n    matrixes.push(getAbsoluteMatrix(matrix, n, origin), createOriginMatrix([hasNotOffset ? el : offsetLeft - el.scrollLeft, hasNotOffset ? origin : offsetTop - el.scrollTop], n));\n\n    if (!targetMatrix) {\n      targetMatrix = matrix;\n    }\n\n    if (!transformOrigin) {\n      transformOrigin = origin;\n    }\n\n    if (isEnd || isFixed) {\n      break;\n    } else {\n      el = offsetParent;\n      isEnd = isOffsetEnd;\n    }\n  }\n\n  var mat = prevMatrix ? convertDimension(prevMatrix, prevN, n) : createIdentityMatrix(n);\n  var beforeMatrix = prevMatrix ? convertDimension(prevMatrix, prevN, n) : createIdentityMatrix(n);\n  var offsetMatrix = createIdentityMatrix(n);\n  var length = matrixes.length;\n  var endContainer = getOffsetInfo(originalContainer, originalContainer, true).offsetParent;\n  matrixes.reverse();\n  matrixes.forEach(function (matrix, i) {\n    var _a;\n\n    if (length - 2 === i) {\n      beforeMatrix = mat.slice();\n    }\n\n    if (length - 1 === i) {\n      offsetMatrix = mat.slice();\n    }\n\n    if (isObject(matrix[n - 1])) {\n      _a = getSVGOffset(matrix[n - 1], endContainer, n, matrix[2 * n - 1], mat, matrixes[i + 1]), matrix[n - 1] = _a[0], matrix[2 * n - 1] = _a[1];\n    }\n\n    mat = multiply(mat, matrix, n);\n  });\n  var isMatrix3d = !isSVGGraphicElement && is3d;\n  var transform = (isMatrix3d ? \"matrix3d\" : \"matrix\") + \"(\" + convertMatrixtoCSS(isSVGGraphicElement && targetMatrix.length === 16 ? convertDimension(targetMatrix, 4, 3) : targetMatrix) + \")\";\n  return [beforeMatrix, offsetMatrix, mat, targetMatrix, transform, transformOrigin, is3d];\n}\n\nfunction getSVGMatrix(el, n) {\n  var clientWidth = el.clientWidth;\n  var clientHeight = el.clientHeight;\n  var viewBox = el.viewBox.baseVal;\n  var viewBoxWidth = viewBox.width || clientWidth;\n  var viewBoxHeight = viewBox.height || clientHeight;\n  var scaleX = clientWidth / viewBoxWidth;\n  var scaleY = clientHeight / viewBoxHeight;\n  var preserveAspectRatio = el.preserveAspectRatio.baseVal; // https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/preserveAspectRatio\n\n  var align = preserveAspectRatio.align; // 1 : meet 2: slice\n\n  var meetOrSlice = preserveAspectRatio.meetOrSlice;\n  var svgOrigin = [0, 0];\n  var scale = [scaleX, scaleY];\n  var translate = [0, 0];\n\n  if (align !== 1) {\n    var xAlign = (align - 2) % 3;\n    var yAlign = Math.floor((align - 2) / 3);\n    svgOrigin[0] = viewBoxWidth * xAlign / 2;\n    svgOrigin[1] = viewBoxHeight * yAlign / 2;\n    var scaleDimension = meetOrSlice === 2 ? Math.max(scaleY, scaleX) : Math.min(scaleX, scaleY);\n    scale[0] = scaleDimension;\n    scale[1] = scaleDimension;\n    translate[0] = (clientWidth - viewBoxWidth) / 2 * xAlign;\n    translate[1] = (clientHeight - viewBoxHeight) / 2 * yAlign;\n  }\n\n  var scaleMatrix = createScaleMatrix(scale, n);\n  scaleMatrix[n - 1] = translate[0], scaleMatrix[2 * n - 1] = translate[1];\n  return getAbsoluteMatrix(scaleMatrix, n, svgOrigin);\n}\n\nfunction getSVGGraphicsOffset(el, origin) {\n  if (!el.getBBox) {\n    return [0, 0];\n  }\n\n  var bbox = el.getBBox();\n  var svgElement = el.ownerSVGElement;\n  var viewBox = svgElement.viewBox.baseVal;\n  var left = bbox.x - viewBox.x;\n  var top = bbox.y - viewBox.y;\n  return [left, top, origin[0] - left, origin[1] - top];\n}\n\nfunction caculatePosition(matrix, pos, n) {\n  return caculate(matrix, convertPositionMatrix(pos, n), n);\n}\n\nfunction caculatePoses(matrix, width, height, n) {\n  var pos1 = caculatePosition(matrix, [0, 0], n);\n  var pos2 = caculatePosition(matrix, [width, 0], n);\n  var pos3 = caculatePosition(matrix, [0, height], n);\n  var pos4 = caculatePosition(matrix, [width, height], n);\n  return [pos1, pos2, pos3, pos4];\n}\n\nfunction getRect(poses) {\n  var posesX = poses.map(function (pos) {\n    return pos[0];\n  });\n  var posesY = poses.map(function (pos) {\n    return pos[1];\n  });\n  var left = Math.min.apply(Math, posesX);\n  var top = Math.min.apply(Math, posesY);\n  var right = Math.max.apply(Math, posesX);\n  var bottom = Math.max.apply(Math, posesY);\n  var rectWidth = right - left;\n  var rectHeight = bottom - top;\n  return {\n    left: left,\n    top: top,\n    right: right,\n    bottom: bottom,\n    width: rectWidth,\n    height: rectHeight\n  };\n}\n\nfunction caculateRect(matrix, width, height, n) {\n  var poses = caculatePoses(matrix, width, height, n);\n  return getRect(poses);\n}\n\nfunction getSVGOffset(el, container, n, origin, beforeMatrix, absoluteMatrix) {\n  var _a;\n\n  var _b = getSize(el),\n      width = _b[0],\n      height = _b[1];\n\n  var containerRect = container.getBoundingClientRect();\n  var rect = el.getBoundingClientRect();\n  var rectLeft = rect.left - containerRect.left + container.scrollLeft;\n  var rectTop = rect.top - containerRect.top + container.scrollTop;\n  var rectWidth = rect.width;\n  var rectHeight = rect.height;\n  var mat = multiplies(n, beforeMatrix, absoluteMatrix);\n\n  var _c = caculateRect(mat, width, height, n),\n      prevLeft = _c.left,\n      prevTop = _c.top,\n      prevWidth = _c.width,\n      prevHeight = _c.height;\n\n  var posOrigin = caculatePosition(mat, origin, n);\n  var prevOrigin = minus(posOrigin, [prevLeft, prevTop]);\n  var rectOrigin = [rectLeft + prevOrigin[0] * rectWidth / prevWidth, rectTop + prevOrigin[1] * rectHeight / prevHeight];\n  var offset = [0, 0];\n  var count = 0;\n\n  while (++count < 10) {\n    var inverseBeforeMatrix = invert(beforeMatrix, n);\n    _a = minus(caculatePosition(inverseBeforeMatrix, rectOrigin, n), caculatePosition(inverseBeforeMatrix, posOrigin, n)), offset[0] = _a[0], offset[1] = _a[1];\n    var mat2 = multiplies(n, beforeMatrix, createOriginMatrix(offset, n), absoluteMatrix);\n\n    var _d = caculateRect(mat2, width, height, n),\n        nextLeft = _d.left,\n        nextTop = _d.top;\n\n    var distLeft = nextLeft - rectLeft;\n    var distTop = nextTop - rectTop;\n\n    if (Math.abs(distLeft) < 2 && Math.abs(distTop) < 2) {\n      break;\n    }\n\n    rectOrigin[0] -= distLeft;\n    rectOrigin[1] -= distTop;\n  }\n\n  return offset.map(function (p) {\n    return Math.round(p);\n  });\n}\n\nfunction caculateMoveablePosition(matrix, origin, width, height) {\n  var is3d = matrix.length === 16;\n  var n = is3d ? 4 : 3;\n\n  var _a = caculatePoses(matrix, width, height, n),\n      _b = _a[0],\n      x1 = _b[0],\n      y1 = _b[1],\n      _c = _a[1],\n      x2 = _c[0],\n      y2 = _c[1],\n      _d = _a[2],\n      x3 = _d[0],\n      y3 = _d[1],\n      _e = _a[3],\n      x4 = _e[0],\n      y4 = _e[1];\n\n  var _f = caculatePosition(matrix, origin, n),\n      originX = _f[0],\n      originY = _f[1];\n\n  var left = Math.min(x1, x2, x3, x4);\n  var top = Math.min(y1, y2, y3, y4);\n  var right = Math.max(x1, x2, x3, x4);\n  var bottom = Math.max(y1, y2, y3, y4);\n  x1 = x1 - left || 0;\n  x2 = x2 - left || 0;\n  x3 = x3 - left || 0;\n  x4 = x4 - left || 0;\n  y1 = y1 - top || 0;\n  y2 = y2 - top || 0;\n  y3 = y3 - top || 0;\n  y4 = y4 - top || 0;\n  originX = originX - left || 0;\n  originY = originY - top || 0;\n  var center = [(x1 + x2 + x3 + x4) / 4, (y1 + y2 + y3 + y4) / 4];\n  var pos1Rad = getRad(center, [x1, y1]);\n  var pos2Rad = getRad(center, [x2, y2]);\n  var direction = pos1Rad < pos2Rad && pos2Rad - pos1Rad < Math.PI || pos1Rad > pos2Rad && pos2Rad - pos1Rad < -Math.PI ? 1 : -1;\n  return [[left, top, right, bottom], [originX, originY], [x1, y1], [x2, y2], [x3, y3], [x4, y4], direction];\n}\n\nfunction getLineStyle(pos1, pos2) {\n  var distX = pos2[0] - pos1[0];\n  var distY = pos2[1] - pos1[1];\n  var width = Math.sqrt(distX * distX + distY * distY);\n  var rad = getRad(pos1, pos2);\n  return {\n    transform: \"translate(\" + pos1[0] + \"px, \" + pos1[1] + \"px) rotate(\" + rad + \"rad)\",\n    width: width + \"px\"\n  };\n}\n\nfunction getControlTransform() {\n  var poses = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    poses[_i] = arguments[_i];\n  }\n\n  var length = poses.length;\n  var x = poses.reduce(function (prev, pos) {\n    return prev + pos[0];\n  }, 0) / length;\n  var y = poses.reduce(function (prev, pos) {\n    return prev + pos[1];\n  }, 0) / length;\n  return {\n    transform: \"translate(\" + x + \"px, \" + y + \"px)\"\n  };\n}\n\nfunction getSize(target, style, isOffset, isBoxSizing) {\n  if (style === void 0) {\n    style = getComputedStyle(target);\n  }\n\n  if (isBoxSizing === void 0) {\n    isBoxSizing = isOffset || style.boxSizing === \"border-box\";\n  }\n\n  var width = target.offsetWidth;\n  var height = target.offsetHeight;\n  var hasOffset = !isUndefined(width);\n\n  if ((isOffset || isBoxSizing) && hasOffset) {\n    return [width, height];\n  }\n\n  width = target.clientWidth;\n  height = target.clientHeight;\n\n  if (!hasOffset && !width && !height) {\n    var bbox = target.getBBox();\n    return [bbox.width, bbox.height];\n  }\n\n  if (isOffset || isBoxSizing) {\n    var borderLeft = parseFloat(style.borderLeftWidth) || 0;\n    var borderRight = parseFloat(style.borderRightWidth) || 0;\n    var borderTop = parseFloat(style.borderTopWidth) || 0;\n    var borderBottom = parseFloat(style.borderBottomWidth) || 0;\n    return [width + borderLeft + borderRight, height + borderTop + borderBottom];\n  } else {\n    var paddingLeft = parseFloat(style.paddingLeft) || 0;\n    var paddingRight = parseFloat(style.paddingRight) || 0;\n    var paddingTop = parseFloat(style.paddingTop) || 0;\n    var paddingBottom = parseFloat(style.paddingBottom) || 0;\n    return [width - paddingLeft - paddingRight, height - paddingTop - paddingBottom];\n  }\n}\n\nfunction getTargetInfo(target, container, parentContainer, state) {\n  var _a, _b, _c, _d, _e;\n\n  var left = 0;\n  var top = 0;\n  var right = 0;\n  var bottom = 0;\n  var origin = [0, 0];\n  var pos1 = [0, 0];\n  var pos2 = [0, 0];\n  var pos3 = [0, 0];\n  var pos4 = [0, 0];\n  var offsetMatrix = createIdentityMatrix3();\n  var beforeMatrix = createIdentityMatrix3();\n  var matrix = createIdentityMatrix3();\n  var targetMatrix = createIdentityMatrix3();\n  var width = 0;\n  var height = 0;\n  var transformOrigin = [0, 0];\n  var direction = 1;\n  var beforeDirection = 1;\n  var is3d = false;\n  var targetTransform = \"\";\n  var beforeOrigin = [0, 0];\n  var clientRect = {\n    left: 0,\n    right: 0,\n    top: 0,\n    bottom: 0,\n    width: 0,\n    height: 0\n  };\n  var containerRect = {\n    left: 0,\n    right: 0,\n    top: 0,\n    bottom: 0,\n    width: 0,\n    height: 0\n  };\n  var prevMatrix = state ? state.beforeMatrix : undefined;\n  var prevN = state ? state.is3d ? 4 : 3 : undefined;\n\n  if (target) {\n    if (state) {\n      width = state.width;\n      height = state.height;\n    } else {\n      var style = getComputedStyle(target);\n      width = target.offsetWidth;\n      height = target.offsetHeight;\n\n      if (isUndefined(width)) {\n        _a = getSize(target, style, true), width = _a[0], height = _a[1];\n      }\n    }\n\n    _b = caculateMatrixStack(target, container, prevMatrix, prevN), beforeMatrix = _b[0], offsetMatrix = _b[1], matrix = _b[2], targetMatrix = _b[3], targetTransform = _b[4], transformOrigin = _b[5], is3d = _b[6];\n    _c = caculateMoveablePosition(matrix, transformOrigin, width, height), _d = _c[0], left = _d[0], top = _d[1], right = _d[2], bottom = _d[3], origin = _c[1], pos1 = _c[2], pos2 = _c[3], pos3 = _c[4], pos4 = _c[5], direction = _c[6];\n    var n = is3d ? 4 : 3;\n    var beforePos = [0, 0];\n    _e = caculateMoveablePosition(offsetMatrix, plus(transformOrigin, getOrigin(targetMatrix, n)), width, height), beforePos = _e[0], beforeOrigin = _e[1], beforeDirection = _e[6];\n    beforeOrigin = [beforeOrigin[0] + beforePos[0] - left, beforeOrigin[1] + beforePos[1] - top];\n    clientRect = getClientRect(target);\n    containerRect = getClientRect(getOffsetInfo(parentContainer, parentContainer, true).offsetParent || document.body);\n  }\n\n  return {\n    containerRect: containerRect,\n    beforeDirection: beforeDirection,\n    direction: direction,\n    target: target,\n    left: left,\n    top: top,\n    right: right,\n    bottom: bottom,\n    pos1: pos1,\n    pos2: pos2,\n    pos3: pos3,\n    pos4: pos4,\n    width: width,\n    height: height,\n    beforeMatrix: beforeMatrix,\n    matrix: matrix,\n    targetTransform: targetTransform,\n    offsetMatrix: offsetMatrix,\n    targetMatrix: targetMatrix,\n    is3d: is3d,\n    beforeOrigin: beforeOrigin,\n    origin: origin,\n    transformOrigin: transformOrigin,\n    clientRect: clientRect\n  };\n}\n\nfunction getClientRect(el) {\n  var _a = el.getBoundingClientRect(),\n      left = _a.left,\n      width = _a.width,\n      top = _a.top,\n      bottom = _a.bottom,\n      right = _a.right,\n      height = _a.height;\n\n  return {\n    left: left,\n    right: right,\n    top: top,\n    bottom: bottom,\n    width: width,\n    height: height\n  };\n}\n\nfunction getDirection(target) {\n  if (!target) {\n    return;\n  }\n\n  var direciton = target.getAttribute(\"data-direction\");\n\n  if (!direciton) {\n    return;\n  }\n\n  var dir = [0, 0];\n  direciton.indexOf(\"w\") > -1 && (dir[0] = -1);\n  direciton.indexOf(\"e\") > -1 && (dir[0] = 1);\n  direciton.indexOf(\"n\") > -1 && (dir[1] = -1);\n  direciton.indexOf(\"s\") > -1 && (dir[1] = 1);\n  return dir;\n}\n\nfunction getAbsolutePoses(poses, dist) {\n  return [plus(dist, poses[0]), plus(dist, poses[1]), plus(dist, poses[2]), plus(dist, poses[3])];\n}\n\nfunction getAbsolutePosesByState(_a) {\n  var left = _a.left,\n      top = _a.top,\n      pos1 = _a.pos1,\n      pos2 = _a.pos2,\n      pos3 = _a.pos3,\n      pos4 = _a.pos4;\n  return getAbsolutePoses([pos1, pos2, pos3, pos4], [left, top]);\n}\n\nfunction throttle(num, unit) {\n  if (!unit) {\n    return num;\n  }\n\n  return Math.round(num / unit) * unit;\n}\n\nfunction throttleArray(nums, unit) {\n  nums.forEach(function (_, i) {\n    nums[i] = throttle(nums[i], unit);\n  });\n  return nums;\n}\n\nfunction unset(self, name) {\n  if (self[name]) {\n    self[name].unset();\n    self[name] = null;\n  }\n}\n\nfunction getOrientationDirection(pos, pos1, pos2) {\n  return (pos[0] - pos1[0]) * (pos2[1] - pos1[1]) - (pos[1] - pos1[1]) * (pos2[0] - pos1[0]);\n}\n\nfunction isInside(pos, pos1, pos2, pos3, pos4) {\n  var k1 = getOrientationDirection(pos, pos1, pos2);\n  var k2 = getOrientationDirection(pos, pos2, pos4);\n  var k3 = getOrientationDirection(pos, pos4, pos1);\n  var k4 = getOrientationDirection(pos, pos2, pos4);\n  var k5 = getOrientationDirection(pos, pos4, pos3);\n  var k6 = getOrientationDirection(pos, pos3, pos2);\n  var signs1 = [k1, k2, k3];\n  var signs2 = [k4, k5, k6];\n\n  if (signs1.every(function (sign) {\n    return sign >= 0;\n  }) || signs1.every(function (sign) {\n    return sign <= 0;\n  }) || signs2.every(function (sign) {\n    return sign >= 0;\n  }) || signs2.every(function (sign) {\n    return sign <= 0;\n  })) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction fillParams(moveable, e, params) {\n  var datas = e.datas;\n\n  if (!datas.datas) {\n    datas.datas = {};\n  }\n\n  return _assign({}, params, {\n    target: moveable.state.target,\n    clientX: e.clientX,\n    clientY: e.clientY,\n    inputEvent: e.inputEvent,\n    currentTarget: moveable,\n    datas: datas.datas\n  });\n}\n\nfunction triggerEvent(moveable, name, params) {\n  return moveable.triggerEvent(name, params);\n}\n\nfunction getComputedStyle(el, pseudoElt) {\n  return window.getComputedStyle(el, pseudoElt);\n}\n\nfunction filterAbles(ables, methods) {\n  var enabledAbles = {};\n  var ableGroups = {};\n  return ables.filter(function (able) {\n    var name = able.name;\n\n    if (enabledAbles[name] || !methods.some(function (method) {\n      return able[method];\n    })) {\n      return false;\n    }\n\n    if (able.ableGroup) {\n      if (ableGroups[name]) {\n        return false;\n      }\n\n      ableGroups[name] = true;\n    }\n\n    enabledAbles[name] = true;\n    return true;\n  });\n}\n\nfunction getKeepRatioHeight(width, isWidth, ratio) {\n  return width * (isWidth ? ratio : 1 / ratio);\n}\n\nfunction getKeepRatioWidth(height, isWidth, ratio) {\n  return height * (isWidth ? 1 / ratio : ratio);\n}\n\nfunction triggerRenderStart(moveable, isGroup, e) {\n  var params = fillParams(moveable, e, {\n    isPinch: !!e.isPinch\n  });\n  var eventAffix = isGroup ? \"Group\" : \"\";\n\n  if (isGroup) {\n    params.targets = moveable.props.targets;\n  }\n\n  triggerEvent(moveable, \"onRender\" + eventAffix + \"Start\", params);\n}\n\nfunction triggerRender(moveable, isGroup, e) {\n  var params = fillParams(moveable, e, {\n    isPinch: !!e.isPinch\n  });\n  var eventAffix = isGroup ? \"Group\" : \"\";\n\n  if (isGroup) {\n    params.targets = moveable.props.targets;\n  }\n\n  triggerEvent(moveable, \"onRender\" + eventAffix, params);\n}\n\nfunction triggerRenderEnd(moveable, isGroup, e) {\n  var params = fillParams(moveable, e, {\n    isPinch: !!e.sPinch,\n    isDrag: e.isDrag\n  });\n  var eventAffix = isGroup ? \"Group\" : \"\";\n\n  if (isGroup) {\n    params.targets = moveable.props.targets;\n  }\n\n  triggerEvent(moveable, \"onRender\" + eventAffix + \"End\", params);\n}\n\nfunction triggerAble(moveable, ableType, eventOperation, eventAffix, eventType, e) {\n  var isStart = eventType === \"Start\";\n\n  if (isStart && eventAffix.indexOf(\"Control\") > -1 && moveable.areaElement === e.inputEvent.target) {\n    return false;\n  }\n\n  var eventName = \"\" + eventOperation + eventAffix + eventType;\n  var conditionName = \"\" + eventOperation + eventAffix + \"Condition\";\n  var isEnd = eventType === \"End\";\n\n  if (isStart) {\n    moveable.updateRect(eventType, true, false);\n  }\n\n  var isGroup = eventAffix.indexOf(\"Group\") > -1;\n  var ables = moveable[ableType];\n  var results = ables.filter(function (able) {\n    var condition = isStart && able[conditionName];\n\n    if (able[eventName] && (!condition || condition(e.inputEvent.target, moveable))) {\n      return able[eventName](moveable, e);\n    }\n\n    return false;\n  });\n  var isUpdate = results.length;\n\n  if (isStart) {\n    triggerRenderStart(moveable, isGroup, e);\n  } else if (isEnd) {\n    triggerRenderEnd(moveable, isGroup, e);\n  } else {\n    triggerRender(moveable, isGroup, e);\n  }\n\n  if (isEnd) {\n    moveable.state.dragger = null;\n  }\n\n  if (!isStart && isUpdate) {\n    if (results.some(function (able) {\n      return able.updateRect;\n    }) && !isGroup) {\n      moveable.updateRect(eventType);\n    } else {\n      moveable.updateTarget(eventType);\n    }\n  } else if (isEnd && !isUpdate) {\n    moveable.forceUpdate();\n  }\n}\n\nfunction getAbleDragger(moveable, target, ableType, eventAffix) {\n  var options = {\n    container: window,\n    pinchThreshold: moveable.props.pinchThreshold\n  };\n  [\"drag\", \"pinch\"].forEach(function (eventOperation) {\n    [\"Start\", \"\", \"End\"].forEach(function (eventType) {\n      options[\"\" + eventOperation + eventType.toLowerCase()] = function (e) {\n        return triggerAble(moveable, ableType, eventOperation, eventAffix, eventType, e);\n      };\n    });\n  });\n  return new Dragger(target, options);\n}\n\nvar ControlBoxElement = styler(\"div\", MOVEABLE_CSS);\n\nfunction renderLine(direction, pos1, pos2, index) {\n  return createElement(\"div\", {\n    key: \"line\" + index,\n    className: prefix(\"line\", \"direction\", direction),\n    \"data-direction\": direction,\n    style: getLineStyle(pos1, pos2)\n  });\n}\n\nvar MoveableManager = /*#__PURE__*/function (_super) {\n  __extends(MoveableManager, _super);\n\n  function MoveableManager() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      conatainer: null,\n      target: null,\n      beforeMatrix: createIdentityMatrix3(),\n      matrix: createIdentityMatrix3(),\n      targetMatrix: createIdentityMatrix3(),\n      targetTransform: \"\",\n      is3d: false,\n      left: 0,\n      top: 0,\n      width: 0,\n      height: 0,\n      transformOrigin: [0, 0],\n      direction: 1,\n      beforeDirection: 1,\n      beforeOrigin: [0, 0],\n      origin: [0, 0],\n      pos1: [0, 0],\n      pos2: [0, 0],\n      pos3: [0, 0],\n      pos4: [0, 0],\n      clientRect: {\n        left: 0,\n        top: 0,\n        bottom: 0,\n        right: 0,\n        width: 0,\n        height: 0\n      },\n      containerRect: {\n        left: 0,\n        top: 0,\n        bottom: 0,\n        right: 0,\n        width: 0,\n        height: 0\n      }\n    };\n    _this.targetAbles = [];\n    _this.controlAbles = [];\n    return _this;\n  }\n\n  var __proto = MoveableManager.prototype;\n\n  __proto.render = function () {\n    var _a = this.props,\n        edge = _a.edge,\n        parentPosition = _a.parentPosition,\n        className = _a.className;\n    this.checkUpdate();\n\n    var _b = parentPosition || {\n      left: 0,\n      top: 0\n    },\n        parentLeft = _b.left,\n        parentTop = _b.top;\n\n    var _c = this.state,\n        left = _c.left,\n        top = _c.top,\n        pos1 = _c.pos1,\n        pos2 = _c.pos2,\n        pos3 = _c.pos3,\n        pos4 = _c.pos4,\n        target = _c.target,\n        direction = _c.direction;\n    return createElement(ControlBoxElement, {\n      ref: ref(this, \"controlBox\"),\n      className: prefix(\"control-box\", direction === -1 ? \"reverse\" : \"\") + \" \" + className,\n      style: {\n        position: \"absolute\",\n        display: target ? \"block\" : \"none\",\n        transform: \"translate(\" + (left - parentLeft) + \"px, \" + (top - parentTop) + \"px) translateZ(50px)\"\n      }\n    }, this.renderAbles(), renderLine(edge ? \"n\" : \"\", pos1, pos2, 0), renderLine(edge ? \"e\" : \"\", pos2, pos4, 1), renderLine(edge ? \"w\" : \"\", pos1, pos3, 2), renderLine(edge ? \"s\" : \"\", pos3, pos4, 3));\n  };\n\n  __proto.componentDidMount = function () {\n    this.controlBox.getElement();\n    var props = this.props;\n    var parentMoveable = props.parentMoveable,\n        container = props.container;\n    this.updateEvent(props);\n\n    if (!container && !parentMoveable) {\n      this.updateRect(\"End\", false, true);\n    }\n  };\n\n  __proto.componentDidUpdate = function (prevProps) {\n    this.updateEvent(prevProps);\n  };\n\n  __proto.componentWillUnmount = function () {\n    unset(this, \"targetDragger\");\n    unset(this, \"controlDragger\");\n  };\n\n  __proto.getContainer = function () {\n    var _a = this.props,\n        parentMoveable = _a.parentMoveable,\n        container = _a.container;\n    return container || parentMoveable && parentMoveable.getContainer() || this.controlBox.getElement().offsetParent;\n  };\n\n  __proto.isMoveableElement = function (target) {\n    return target && (target.getAttribute(\"class\") || \"\").indexOf(PREFIX) > -1;\n  };\n\n  __proto.dragStart = function (e) {\n    if (this.targetDragger) {\n      this.targetDragger.onDragStart(e);\n    }\n  };\n\n  __proto.isInside = function (clientX, clientY) {\n    var _a = this.state,\n        pos1 = _a.pos1,\n        pos2 = _a.pos2,\n        pos3 = _a.pos3,\n        pos4 = _a.pos4,\n        target = _a.target;\n\n    if (!target) {\n      return false;\n    }\n\n    var _b = target.getBoundingClientRect(),\n        left = _b.left,\n        top = _b.top;\n\n    var pos = [clientX - left, clientY - top];\n    return isInside(pos, pos1, pos2, pos4, pos3);\n  };\n\n  __proto.updateRect = function (type, isTarget, isSetState) {\n    if (isSetState === void 0) {\n      isSetState = true;\n    }\n\n    var parentMoveable = this.props.parentMoveable;\n    var state = this.state;\n    var target = state.target || this.props.target;\n    var container = this.getContainer();\n    this.updateState(getTargetInfo(target, container, container, isTarget ? state : undefined), parentMoveable ? false : isSetState);\n  };\n\n  __proto.updateEvent = function (prevProps) {\n    var controlBoxElement = this.controlBox.getElement();\n    var hasTargetAble = this.targetAbles.length;\n    var hasControlAble = this.controlAbles.length;\n    var target = this.props.target;\n    var prevTarget = prevProps.target;\n    var dragArea = this.props.dragArea;\n    var prevDragArea = prevProps.dragArea;\n    var isTargetChanged = !dragArea && prevTarget !== target;\n    var isUnset = !hasTargetAble && this.targetDragger || isTargetChanged || prevDragArea !== dragArea;\n\n    if (isUnset) {\n      unset(this, \"targetDragger\");\n      this.updateState({\n        dragger: null\n      });\n    }\n\n    if (!hasControlAble) {\n      unset(this, \"controlDragger\");\n    }\n\n    if (target && hasTargetAble && !this.targetDragger) {\n      if (dragArea) {\n        this.targetDragger = getAbleDragger(this, this.areaElement, \"targetAbles\", \"\");\n      } else {\n        this.targetDragger = getAbleDragger(this, target, \"targetAbles\", \"\");\n      }\n    }\n\n    if (!this.controlDragger && hasControlAble) {\n      this.controlDragger = getAbleDragger(this, controlBoxElement, \"controlAbles\", \"Control\");\n    }\n\n    if (isUnset) {\n      this.unsetAbles();\n    }\n  };\n\n  __proto.updateTarget = function (type) {\n    this.updateRect(type, true);\n  };\n\n  __proto.getRect = function () {\n    var poses = getAbsolutePosesByState(this.state);\n    var pos1 = poses[0],\n        pos2 = poses[1],\n        pos3 = poses[2],\n        pos4 = poses[3];\n    var rect = getRect(poses);\n    var width = rect.width,\n        height = rect.height,\n        left = rect.left,\n        top = rect.top;\n    return {\n      width: width,\n      height: height,\n      left: left,\n      top: top,\n      pos1: pos1,\n      pos2: pos2,\n      pos3: pos3,\n      pos4: pos4\n    };\n  };\n\n  __proto.checkUpdate = function () {\n    var _a = this.props,\n        target = _a.target,\n        container = _a.container,\n        parentMoveable = _a.parentMoveable;\n    var _b = this.state,\n        stateTarget = _b.target,\n        stateContainer = _b.container;\n\n    if (!stateTarget && !target) {\n      return;\n    }\n\n    this.updateAbles();\n    var isChanged = stateTarget !== target || stateContainer !== container;\n\n    if (!isChanged) {\n      return;\n    }\n\n    this.updateState({\n      target: target,\n      container: container\n    });\n\n    if (!parentMoveable && (container || this.controlBox)) {\n      this.updateRect(\"End\", false, false);\n    }\n  };\n\n  __proto.triggerEvent = function (name, e) {\n    var callback = this.props[name];\n    return callback && callback(e);\n  };\n\n  __proto.unsetAbles = function () {\n    var _this = this;\n\n    if (this.targetAbles.filter(function (able) {\n      if (able.unset) {\n        able.unset(_this);\n        return true;\n      }\n\n      return false;\n    }).length) {\n      this.forceUpdate();\n    }\n  };\n\n  __proto.updateAbles = function (ables, eventAffix) {\n    if (ables === void 0) {\n      ables = this.props.ables;\n    }\n\n    if (eventAffix === void 0) {\n      eventAffix = \"\";\n    }\n\n    var props = this.props;\n    var enabledAbles = ables.filter(function (able) {\n      return able && props[able.name];\n    });\n    var dragStart = \"drag\" + eventAffix + \"Start\";\n    var pinchStart = \"pinch\" + eventAffix + \"Start\";\n    var dragControlStart = \"drag\" + eventAffix + \"ControlStart\";\n    var targetAbles = filterAbles(enabledAbles, [dragStart, pinchStart]);\n    var controlAbles = filterAbles(enabledAbles, [dragControlStart]);\n    this.targetAbles = targetAbles;\n    this.controlAbles = controlAbles;\n  };\n\n  __proto.updateState = function (nextState, isSetState) {\n    if (isSetState) {\n      this.setState(nextState);\n    } else {\n      var state = this.state;\n\n      for (var name in nextState) {\n        state[name] = nextState[name];\n      }\n    }\n  };\n\n  __proto.renderAbles = function () {\n    var _this = this;\n\n    var props = this.props;\n    var ables = props.ables;\n    var enabledAbles = ables.filter(function (able) {\n      return able && props[able.name];\n    });\n    return filterAbles(enabledAbles, [\"render\"]).map(function (_a) {\n      var render = _a.render;\n      return render(_this, React);\n    });\n  };\n\n  MoveableManager.defaultProps = {\n    target: null,\n    container: null,\n    origin: true,\n    keepRatio: false,\n    edge: false,\n    parentMoveable: null,\n    parentPosition: null,\n    ables: [],\n    pinchThreshold: 20,\n    dragArea: false,\n    transformOrigin: \"\",\n    className: \"\"\n  };\n  return MoveableManager;\n}(PureComponent);\n\nfunction getRotatiion(touches) {\n  return getRad([touches[0].clientX, touches[0].clientY], [touches[1].clientX, touches[1].clientY]) / Math.PI * 180;\n}\n\nvar Pinchable = {\n  name: \"pinchable\",\n  updateRect: true,\n  pinchStart: function pinchStart(moveable, e) {\n    var datas = e.datas,\n        clientX = e.clientX,\n        clientY = e.clientY,\n        touches = e.touches,\n        inputEvent = e.inputEvent,\n        targets = e.targets;\n    var _a = moveable.props,\n        pinchable = _a.pinchable,\n        ables = _a.ables;\n\n    if (!pinchable) {\n      return false;\n    }\n\n    var eventName = \"onPinch\" + (targets ? \"Group\" : \"\") + \"Start\";\n    var controlEventName = \"drag\" + (targets ? \"Group\" : \"\") + \"ControlStart\";\n    var pinchAbles = (pinchable === true ? moveable.controlAbles : ables.filter(function (able) {\n      return pinchable.indexOf(able.name) > -1;\n    })).filter(function (able) {\n      return able.canPinch && able[controlEventName];\n    });\n    var params = fillParams(moveable, e, {});\n\n    if (targets) {\n      params.targets = targets;\n    }\n\n    var result = triggerEvent(moveable, eventName, params);\n    datas.isPinch = result !== false;\n    datas.ables = pinchAbles;\n    var isPinch = datas.isPinch;\n\n    if (!isPinch) {\n      return false;\n    }\n\n    var parentRotate = getRotatiion(touches);\n    pinchAbles.forEach(function (able) {\n      datas[able.name + \"Datas\"] = {};\n      var ableEvent = {\n        datas: datas[able.name + \"Datas\"],\n        clientX: clientX,\n        clientY: clientY,\n        inputEvent: inputEvent,\n        parentRotate: parentRotate,\n        pinchFlag: true\n      };\n      able[controlEventName](moveable, ableEvent);\n    });\n    moveable.state.snapDirection = [0, 0];\n    return isPinch;\n  },\n  pinch: function pinch(moveable, e) {\n    var datas = e.datas,\n        clientX = e.clientX,\n        clientY = e.clientY,\n        pinchScale = e.scale,\n        distance = e.distance,\n        touches = e.touches,\n        inputEvent = e.inputEvent,\n        targets = e.targets;\n\n    if (!datas.isPinch) {\n      return;\n    }\n\n    var parentRotate = getRotatiion(touches);\n    var parentDistance = distance * (1 - 1 / pinchScale);\n    var params = fillParams(moveable, e, {});\n\n    if (targets) {\n      params.targets = targets;\n    }\n\n    var eventName = \"onPinch\" + (targets ? \"Group\" : \"\");\n    triggerEvent(moveable, eventName, params);\n    var ables = datas.ables;\n    var controlEventName = \"drag\" + (targets ? \"Group\" : \"\") + \"Control\";\n    ables.forEach(function (able) {\n      able[controlEventName](moveable, {\n        clientX: clientX,\n        clientY: clientY,\n        datas: datas[able.name + \"Datas\"],\n        inputEvent: inputEvent,\n        parentDistance: parentDistance,\n        parentRotate: parentRotate,\n        pinchFlag: true\n      });\n    });\n    return params;\n  },\n  pinchEnd: function pinchEnd(moveable, e) {\n    var datas = e.datas,\n        clientX = e.clientX,\n        clientY = e.clientY,\n        isPinch = e.isPinch,\n        inputEvent = e.inputEvent,\n        targets = e.targets;\n\n    if (!datas.isPinch) {\n      return;\n    }\n\n    var eventName = \"onPinch\" + (targets ? \"Group\" : \"\") + \"End\";\n    var params = fillParams(moveable, e, {\n      isDrag: isPinch\n    });\n\n    if (targets) {\n      params.targets = targets;\n    }\n\n    triggerEvent(moveable, eventName, params);\n    var ables = datas.ables;\n    var controlEventName = \"drag\" + (targets ? \"Group\" : \"\") + \"ControlEnd\";\n    ables.forEach(function (able) {\n      able[controlEventName](moveable, {\n        clientX: clientX,\n        clientY: clientY,\n        isDrag: isPinch,\n        datas: datas[able.name + \"Datas\"],\n        inputEvent: inputEvent,\n        pinchFlag: true\n      });\n    });\n    return isPinch;\n  },\n  pinchGroupStart: function pinchGroupStart(moveable, e) {\n    return this.pinchStart(moveable, _assign({}, e, {\n      targets: moveable.props.targets\n    }));\n  },\n  pinchGroup: function pinchGroup(moveable, e) {\n    return this.pinch(moveable, _assign({}, e, {\n      targets: moveable.props.targets\n    }));\n  },\n  pinchGroupEnd: function pinchGroupEnd(moveable, e) {\n    return this.pinchEnd(moveable, _assign({}, e, {\n      targets: moveable.props.targets\n    }));\n  }\n};\n\nfunction triggerChildAble(moveable, able, type, datas, eachEvent, callback) {\n  var name = able.name;\n  var ableDatas = datas[name] || (datas[name] = []);\n  var isEnd = !!type.match(/End$/g);\n  var childs = moveable.moveables.map(function (child, i) {\n    var childDatas = ableDatas[i] || (ableDatas[i] = {});\n    var childEvent = isFunction(eachEvent) ? eachEvent(child, childDatas) : eachEvent;\n    var result = able[type](child, _assign({}, childEvent, {\n      datas: childDatas,\n      parentFlag: true\n    }));\n    result && callback && callback(child, childDatas, result, i);\n\n    if (isEnd) {\n      child.state.dragger = null;\n    }\n\n    return result;\n  });\n  return childs;\n}\n\nfunction directionCondition(target) {\n  return hasClass(target, prefix(\"direction\"));\n}\n\nfunction setDragStart(moveable, _a) {\n  var datas = _a.datas;\n  var _b = moveable.state,\n      matrix = _b.matrix,\n      beforeMatrix = _b.beforeMatrix,\n      is3d = _b.is3d,\n      left = _b.left,\n      top = _b.top,\n      origin = _b.origin,\n      offsetMatrix = _b.offsetMatrix,\n      targetMatrix = _b.targetMatrix,\n      transformOrigin = _b.transformOrigin;\n  var n = is3d ? 4 : 3;\n  datas.is3d = is3d;\n  datas.matrix = matrix;\n  datas.targetMatrix = targetMatrix;\n  datas.beforeMatrix = beforeMatrix;\n  datas.offsetMatrix = offsetMatrix;\n  datas.transformOrigin = transformOrigin;\n  datas.inverseMatrix = invert(matrix, n);\n  datas.inverseBeforeMatrix = invert(beforeMatrix, n);\n  datas.absoluteOrigin = convertPositionMatrix(plus([left, top], origin), n);\n  datas.startDragBeforeDist = caculate(datas.inverseBeforeMatrix, datas.absoluteOrigin, n);\n  datas.startDragDist = caculate(datas.inverseMatrix, datas.absoluteOrigin, n);\n}\n\nfunction getDragDist(_a, isBefore) {\n  var datas = _a.datas,\n      distX = _a.distX,\n      distY = _a.distY;\n  var inverseBeforeMatrix = datas.inverseBeforeMatrix,\n      inverseMatrix = datas.inverseMatrix,\n      is3d = datas.is3d,\n      startDragBeforeDist = datas.startDragBeforeDist,\n      startDragDist = datas.startDragDist,\n      absoluteOrigin = datas.absoluteOrigin;\n  var n = is3d ? 4 : 3;\n  return minus(caculate(isBefore ? inverseBeforeMatrix : inverseMatrix, plus(absoluteOrigin, [distX, distY]), n), isBefore ? startDragBeforeDist : startDragDist);\n}\n\nfunction caculateTransformOrigin(transformOrigin, width, height, prevWidth, prevHeight, prevOrigin) {\n  if (prevWidth === void 0) {\n    prevWidth = width;\n  }\n\n  if (prevHeight === void 0) {\n    prevHeight = height;\n  }\n\n  if (prevOrigin === void 0) {\n    prevOrigin = [0, 0];\n  }\n\n  if (!transformOrigin) {\n    return prevOrigin;\n  }\n\n  return transformOrigin.map(function (pos, i) {\n    var _a = splitUnit(pos),\n        value = _a.value,\n        unit = _a.unit;\n\n    var prevSize = i ? prevHeight : prevWidth;\n    var size = i ? height : width;\n\n    if (pos === \"%\" || isNaN(value)) {\n      // no value but %\n      var measureRatio = prevSize ? prevOrigin[i] / prevSize : 0;\n      return size * measureRatio;\n    } else if (unit !== \"%\") {\n      return value;\n    }\n\n    return size * value / 100;\n  });\n}\n\nfunction getPosIndexesByDirection(direction) {\n  var indexes = [];\n\n  if (direction[1] >= 0) {\n    if (direction[0] >= 0) {\n      indexes.push(3);\n    }\n\n    if (direction[0] <= 0) {\n      indexes.push(2);\n    }\n  }\n\n  if (direction[1] <= 0) {\n    if (direction[0] >= 0) {\n      indexes.push(1);\n    }\n\n    if (direction[0] <= 0) {\n      indexes.push(0);\n    }\n  }\n\n  return indexes;\n}\n\nfunction getPosesByDirection(poses, direction) {\n  /*\n  [-1, -1](pos1)       [0, -1](pos1,pos2)       [1, -1](pos2)\n  [-1, 0](pos1, pos3)                           [1, 0](pos2, pos4)\n  [-1, 1](pos3)        [0, 1](pos3, pos4)       [1, 1](pos4)\n  */\n  return getPosIndexesByDirection(direction).map(function (index) {\n    return poses[index];\n  });\n}\n\nfunction getPosByDirection(poses, direction) {\n  /*\n  [-1, -1](pos1)       [0, -1](pos1,pos2)       [1, -1](pos2)\n  [-1, 0](pos1, pos3)                           [1, 0](pos2, pos4)\n  [-1, 1](pos3)        [0, 1](pos3, pos4)       [1, 1](pos4)\n  */\n  var nextPoses = getPosesByDirection(poses, direction);\n  return [average.apply(void 0, nextPoses.map(function (pos) {\n    return pos[0];\n  })), average.apply(void 0, nextPoses.map(function (pos) {\n    return pos[1];\n  }))];\n}\n\nfunction getPosByReverseDirection(_a, direction) {\n  /*\n  [-1, -1](pos4)       [0, -1](pos3,pos4)       [1, -1](pos3)\n  [-1, 0](pos2, pos4)                           [1, 0](pos3, pos1)\n  [-1, 1](pos2)        [0, 1](pos1, pos2)       [1, 1](pos1)\n  */\n  var pos1 = _a[0],\n      pos2 = _a[1],\n      pos3 = _a[2],\n      pos4 = _a[3];\n  return getPosByDirection([pos4, pos3, pos2, pos1], direction);\n}\n\nfunction getStartPos(poses, direction) {\n  var startPos1 = poses[0],\n      startPos2 = poses[1],\n      startPos3 = poses[2],\n      startPos4 = poses[3];\n  return getPosByReverseDirection([startPos1, startPos2, startPos3, startPos4], direction);\n}\n\nfunction getDist(startPos, matrix, width, height, n, direction) {\n  var poses = caculatePoses(matrix, width, height, n);\n  var pos = getPosByReverseDirection(poses, direction);\n  var distX = startPos[0] - pos[0];\n  var distY = startPos[1] - pos[1];\n  return [distX, distY];\n}\n\nfunction getNextMatrix(offsetMatrix, targetMatrix, origin, n) {\n  return multiply(offsetMatrix, getAbsoluteMatrix(targetMatrix, n, origin), n);\n}\n\nfunction scaleMatrix(state, scale) {\n  var transformOrigin = state.transformOrigin,\n      offsetMatrix = state.offsetMatrix,\n      is3d = state.is3d,\n      targetMatrix = state.targetMatrix;\n  var n = is3d ? 4 : 3;\n  return getNextMatrix(offsetMatrix, multiply(targetMatrix, createScaleMatrix(scale, n), n), transformOrigin, n);\n}\n\nfunction getScaleDist(moveable, scale, direction, dragClient) {\n  var state = moveable.state;\n  var is3d = state.is3d,\n      left = state.left,\n      top = state.top,\n      width = state.width,\n      height = state.height;\n  var n = is3d ? 4 : 3;\n  var groupable = moveable.props.groupable;\n  var nextMatrix = scaleMatrix(moveable.state, scale);\n  var groupLeft = groupable ? left : 0;\n  var groupTop = groupable ? top : 0;\n  var startPos = dragClient ? dragClient : getStartPos(getAbsolutePosesByState(moveable.state), direction);\n  var dist = getDist(startPos, nextMatrix, width, height, n, direction);\n  return minus(dist, [groupLeft, groupTop]);\n}\n\nfunction getResizeDist(moveable, width, height, direction, transformOrigin, dragClient) {\n  var groupable = moveable.props.groupable;\n  var _a = moveable.state,\n      prevOrigin = _a.transformOrigin,\n      targetMatrix = _a.targetMatrix,\n      offsetMatrix = _a.offsetMatrix,\n      is3d = _a.is3d,\n      prevWidth = _a.width,\n      prevheight = _a.height,\n      left = _a.left,\n      top = _a.top;\n  var n = is3d ? 4 : 3;\n  var nextOrigin = caculateTransformOrigin(transformOrigin, width, height, prevWidth, prevheight, prevOrigin);\n  var groupLeft = groupable ? left : 0;\n  var groupTop = groupable ? top : 0;\n  var nextMatrix = getNextMatrix(offsetMatrix, targetMatrix, nextOrigin, n);\n  var startPos = dragClient ? dragClient : getStartPos(getAbsolutePosesByState(moveable.state), direction);\n  var dist = getDist(startPos, nextMatrix, width, height, n, direction);\n  return minus(dist, [groupLeft, groupTop]);\n}\n\nfunction snapStart(moveable) {\n  var state = moveable.state;\n\n  if (state.guidelines && state.guidelines.length) {\n    return;\n  }\n\n  var _a = moveable.props,\n      _b = _a.horizontalGuidelines,\n      horizontalGuidelines = _b === void 0 ? [] : _b,\n      _c = _a.verticalGuidelines,\n      verticalGuidelines = _c === void 0 ? [] : _c,\n      _d = _a.elementGuidelines,\n      elementGuidelines = _d === void 0 ? [] : _d,\n      bounds = _a.bounds,\n      snapCenter = _a.snapCenter;\n\n  if (!bounds && !horizontalGuidelines.length && !verticalGuidelines.length && !elementGuidelines.length) {\n    return;\n  }\n\n  var _e = state.containerRect,\n      containerWidth = _e.width,\n      containerHeight = _e.height,\n      containerTop = _e.top,\n      containerLeft = _e.left,\n      _f = state.clientRect,\n      clientTop = _f.top,\n      clientLeft = _f.left,\n      targetLeft = state.left,\n      targetTop = state.top;\n  var distLeft = targetLeft - (clientLeft - containerLeft);\n  var distTop = targetTop - (clientTop - containerTop);\n  var guidelines = [];\n  horizontalGuidelines.forEach(function (pos) {\n    guidelines.push({\n      type: \"horizontal\",\n      pos: [0, pos],\n      size: containerWidth\n    });\n  });\n  verticalGuidelines.forEach(function (pos) {\n    guidelines.push({\n      type: \"vertical\",\n      pos: [pos, 0],\n      size: containerHeight\n    });\n  });\n  elementGuidelines.forEach(function (el) {\n    var rect = el.getBoundingClientRect();\n    var top = rect.top,\n        left = rect.left,\n        width = rect.width,\n        height = rect.height;\n    var elementTop = top - containerTop;\n    var elementBottom = elementTop + height;\n    var elementLeft = left - containerLeft;\n    var elementRight = elementLeft + width;\n    guidelines.push({\n      type: \"vertical\",\n      element: el,\n      pos: [elementLeft + distLeft, elementTop],\n      size: height\n    });\n    guidelines.push({\n      type: \"vertical\",\n      element: el,\n      pos: [elementRight + distLeft, elementTop],\n      size: height\n    });\n    guidelines.push({\n      type: \"horizontal\",\n      element: el,\n      pos: [elementLeft, elementTop + distTop],\n      size: width\n    });\n    guidelines.push({\n      type: \"horizontal\",\n      element: el,\n      pos: [elementLeft, elementBottom + distTop],\n      size: width\n    });\n\n    if (snapCenter) {\n      guidelines.push({\n        type: \"vertical\",\n        element: el,\n        pos: [(elementLeft + elementRight) / 2 + distLeft, elementTop],\n        size: height,\n        center: true\n      });\n      guidelines.push({\n        type: \"horizontal\",\n        element: el,\n        pos: [elementLeft, (elementTop + elementBottom) / 2 + distTop],\n        size: width,\n        center: true\n      });\n    }\n  });\n  state.guidelines = guidelines;\n  state.enableSnap = true;\n}\n\nfunction checkBounds(moveable, verticalPoses, horizontalPoses, snapThreshold) {\n  return {\n    vertical: checkBound(moveable, verticalPoses, true, snapThreshold),\n    horizontal: checkBound(moveable, horizontalPoses, false, snapThreshold)\n  };\n}\n\nfunction checkBound(moveable, poses, isVertical, snapThreshold) {\n  if (snapThreshold === void 0) {\n    snapThreshold = 0;\n  }\n\n  var bounds = moveable.props.bounds;\n\n  if (bounds) {\n    var startPos = bounds[isVertical ? \"left\" : \"top\"];\n    var endPos = bounds[isVertical ? \"right\" : \"bottom\"];\n    var minPos = Math.min.apply(Math, poses);\n    var maxPos = Math.max.apply(Math, poses);\n\n    if (!isUndefined(startPos) && startPos + snapThreshold > minPos) {\n      return {\n        isBound: true,\n        offset: minPos - startPos,\n        pos: startPos\n      };\n    }\n\n    if (!isUndefined(endPos) && endPos - snapThreshold < maxPos) {\n      return {\n        isBound: true,\n        offset: maxPos - endPos,\n        pos: endPos\n      };\n    }\n  }\n\n  return {\n    isBound: false,\n    offset: 0,\n    pos: 0\n  };\n}\n\nfunction checkSnap(guidelines, targetType, targetPoses, isSnapCenter, snapThreshold) {\n  if (!guidelines) {\n    return {\n      isSnap: false,\n      dist: -1,\n      offset: 0,\n      guidelines: [],\n      snapPoses: []\n    };\n  }\n\n  var snapGuidelines = [];\n  var snapDist = Infinity;\n  var snapOffset = 0;\n  var isVertical = targetType === \"vertical\";\n  var posType = isVertical ? 0 : 1;\n  var snapPoses = targetPoses.filter(function (targetPos) {\n    return guidelines.filter(function (guideline) {\n      var type = guideline.type,\n          pos = guideline.pos,\n          center = guideline.center;\n\n      if (!isSnapCenter && center || type !== targetType) {\n        return false;\n      }\n\n      var offset = targetPos - pos[posType];\n      var dist = Math.abs(offset);\n\n      if (dist > snapThreshold) {\n        return false;\n      }\n\n      if (snapDist > dist) {\n        snapDist = dist;\n        snapGuidelines = [];\n      }\n\n      if (snapDist === dist) {\n        snapOffset = offset;\n        snapGuidelines.push(guideline);\n      }\n\n      return true;\n    }).length;\n  });\n  return {\n    isSnap: !!snapGuidelines.length,\n    dist: isFinite(snapDist) ? snapDist : -1,\n    offset: snapOffset,\n    guidelines: snapGuidelines,\n    snapPoses: snapPoses\n  };\n}\n\nfunction hasGuidelines(moveable, ableName) {\n  var _a = moveable.props,\n      snappable = _a.snappable,\n      bounds = _a.bounds,\n      _b = moveable.state,\n      guidelines = _b.guidelines,\n      enableSnap = _b.enableSnap;\n\n  if (!snappable || !enableSnap || ableName && snappable !== true && snappable.indexOf(ableName) || !bounds && (!guidelines || !guidelines.length)) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction checkSnapPoses(moveable, posesX, posesY, isSnapCenter, customSnapThreshold) {\n  var guidelines = moveable.state.guidelines;\n  var snapThreshold = !isUndefined(customSnapThreshold) ? customSnapThreshold : !isUndefined(moveable.props.snapThreshold) ? moveable.props.snapThreshold : 5;\n  return {\n    vertical: checkSnap(guidelines, \"vertical\", posesX, isSnapCenter, snapThreshold),\n    horizontal: checkSnap(guidelines, \"horizontal\", posesY, isSnapCenter, snapThreshold)\n  };\n}\n\nfunction checkSnaps(moveable, rect, isCenter, customSnapThreshold) {\n  var snapCenter = moveable.props.snapCenter;\n  var isSnapCenter = snapCenter && isCenter;\n  var verticalNames = [\"left\", \"right\"];\n  var horizontalNames = [\"top\", \"bottom\"];\n\n  if (isSnapCenter) {\n    verticalNames.push(\"center\");\n    horizontalNames.push(\"middle\");\n  }\n\n  verticalNames = verticalNames.filter(function (name) {\n    return name in rect;\n  });\n  horizontalNames = horizontalNames.filter(function (name) {\n    return name in rect;\n  });\n  return checkSnapPoses(moveable, verticalNames.map(function (name) {\n    return rect[name];\n  }), horizontalNames.map(function (name) {\n    return rect[name];\n  }), isSnapCenter, customSnapThreshold);\n}\n\nfunction checkBoundOneWayDist(moveable, pos) {\n  var _a = checkBounds(moveable, [pos[0]], [pos[1]]),\n      _b = _a.horizontal,\n      isHorizontalBound = _b.isBound,\n      horizontalBoundOffset = _b.offset,\n      _c = _a.vertical,\n      isVerticalBound = _c.isBound,\n      verticalBoundOffset = _c.offset;\n\n  if (isHorizontalBound || isVerticalBound) {\n    var isVertical = void 0;\n\n    if (isHorizontalBound && isVerticalBound) {\n      isVertical = Math.abs(horizontalBoundOffset) < Math.abs(verticalBoundOffset);\n    } else {\n      isVertical = isVerticalBound;\n    }\n\n    var offset = isVertical ? verticalBoundOffset : horizontalBoundOffset;\n    return {\n      isVertical: isVertical,\n      offset: offset,\n      dist: Math.abs(offset)\n    };\n  }\n\n  return;\n}\n\nfunction solveNextDist(pos1, pos2, offset, isVertical, isDirectionVertical, datas) {\n  var sizeOffset = solveEquation(pos1, pos2, -offset, isVertical);\n\n  if (!sizeOffset) {\n    return NaN;\n  }\n\n  var _a = getDragDist({\n    datas: datas,\n    distX: sizeOffset[0],\n    distY: sizeOffset[1]\n  }),\n      widthDist = _a[0],\n      heightDist = _a[1];\n\n  return isDirectionVertical ? heightDist : widthDist;\n}\n\nfunction getFixedPoses(matrix, width, height, fixedPos, direction, is3d) {\n  var nextPoses = caculatePoses(matrix, width, height, is3d ? 4 : 3);\n  var nextPos = getPosByReverseDirection(nextPoses, direction);\n  return getAbsolutePoses(nextPoses, minus(fixedPos, nextPos));\n}\n\nfunction checkBoundOneWayPos(moveable, pos, reversePos, isDirectionVertical, datas) {\n  var _a = checkSnapPoses(moveable, [pos[0]], [pos[1]]),\n      _b = _a.horizontal,\n      isHorizontalSnap = _b.isSnap,\n      horizontalOffset = _b.offset,\n      horizontalDist = _b.dist,\n      _c = _a.vertical,\n      isVerticalSnap = _c.isSnap,\n      verticalOffset = _c.offset,\n      verticalDist = _c.dist;\n\n  var fixedHorizontal = reversePos[1] === pos[1];\n  var fixedVertical = reversePos[0] === pos[0];\n  var isVertical;\n\n  if (!isHorizontalSnap && !isVerticalSnap) {\n    // no snap\n    return NaN;\n  } else if (isHorizontalSnap && isVerticalSnap) {\n    if (horizontalDist === 0 && fixedHorizontal) {\n      isVertical = true;\n    } else if (verticalOffset === 0 && fixedVertical) {\n      isVertical = false;\n    } else {\n      isVertical = horizontalDist > verticalDist;\n    }\n  } else {\n    isVertical = isVerticalSnap;\n  }\n\n  return solveNextDist(reversePos, pos, isVertical ? verticalOffset : horizontalOffset, isVertical, isDirectionVertical, datas);\n}\n\nfunction checkOneWayPos(moveable, poses, reversePoses, isDirectionVertical, datas) {\n  var posOffset = 0;\n  var boundInfo;\n  var boundIndex = -1;\n  var boundInfos = poses.map(function (pos) {\n    return checkBoundOneWayDist(moveable, pos);\n  });\n  boundInfos.forEach(function (info, i) {\n    if (!info) {\n      return;\n    }\n\n    if (!boundInfo || boundInfo.dist < info.dist) {\n      boundInfo = info;\n      boundIndex = i;\n    }\n  });\n\n  if (boundInfo) {\n    var nextDist = solveNextDist(reversePoses[boundIndex], poses[boundIndex], boundInfo.offset, boundInfo.isVertical, isDirectionVertical, datas);\n\n    if (!isNaN(nextDist)) {\n      posOffset = nextDist;\n    }\n  } else {\n    poses.some(function (pos, i) {\n      var nextDist = checkBoundOneWayPos(moveable, pos, reversePoses[i], isDirectionVertical, datas);\n\n      if (isNaN(nextDist)) {\n        return false;\n      }\n\n      posOffset = nextDist;\n      return true;\n    });\n  }\n\n  return posOffset;\n}\n\nfunction checkOneWayDist(moveable, poses, direction, datas) {\n  var directionIndex = direction[0] !== 0 ? 0 : 1;\n  var isDirectionVertical = directionIndex > 0;\n  var reversePoses = poses.slice().reverse();\n  var directionPoses;\n  var reverseDirectionPoses;\n\n  if (moveable.props.keepRatio) {\n    directionPoses = [getPosByDirection(poses, direction)];\n    reverseDirectionPoses = [getPosByDirection(reversePoses, direction)];\n  } else {\n    directionPoses = getPosesByDirection(poses, direction);\n    reverseDirectionPoses = getPosesByDirection(reversePoses, direction);\n    directionPoses.push([(directionPoses[0][0] + directionPoses[1][0]) / 2, (directionPoses[0][1] + directionPoses[1][1]) / 2]);\n    reverseDirectionPoses.reverse();\n    reverseDirectionPoses.push([(reverseDirectionPoses[0][0] + reverseDirectionPoses[1][0]) / 2, (reverseDirectionPoses[0][1] + reverseDirectionPoses[1][1]) / 2]);\n  }\n\n  var posOffset = checkOneWayPos(moveable, directionPoses, reverseDirectionPoses, isDirectionVertical, datas);\n  var offset = [0, 0];\n  offset[directionIndex] = direction[directionIndex] * posOffset;\n  return offset;\n}\n\nfunction checkTwoWayDist(moveable, poses, direction, datas, matrix, width, height, fixedPos, is3d) {\n  var _a;\n\n  var directionPoses = getPosesByDirection(poses, direction);\n  var verticalDirection = [direction[0], direction[1] * -1];\n  var horizontalDirection = [direction[0] * -1, direction[1]];\n  var verticalPos = getPosByDirection(poses, verticalDirection);\n  var horizontalPos = getPosByDirection(poses, horizontalDirection);\n\n  var _b = checkBounds(moveable, [directionPoses[0][0]], [directionPoses[0][1]]),\n      _c = _b.horizontal,\n      isHorizontalBound = _c.isBound,\n      horizontalBoundOffset = _c.offset,\n      _d = _b.vertical,\n      isVerticalBound = _d.isBound,\n      verticalBoundOffset = _d.offset; // share drag event\n\n\n  var widthDist = 0;\n  var heightDist = 0;\n  var verticalBoundInfo = checkBoundOneWayDist(moveable, verticalPos);\n  var horizontalBoundInfo = checkBoundOneWayDist(moveable, horizontalPos);\n  var isVeritcalDirectionBound = verticalBoundInfo && verticalBoundInfo.dist > Math.abs(verticalBoundOffset);\n  var isHorizontalDirectionBound = horizontalBoundInfo && horizontalBoundInfo.dist > Math.abs(horizontalBoundOffset);\n\n  if (!isVeritcalDirectionBound && !isHorizontalDirectionBound) {\n    var _e = checkSnapPoses(moveable, [directionPoses[0][0]], [directionPoses[0][1]]),\n        horizontalOffset = _e.horizontal.offset,\n        verticalOffset = _e.vertical.offset;\n\n    _a = getDragDist({\n      datas: datas,\n      distX: -(isVerticalBound ? verticalBoundOffset : verticalOffset),\n      distY: -(isHorizontalBound ? horizontalBoundOffset : horizontalOffset)\n    }), widthDist = _a[0], heightDist = _a[1];\n  } else if (isVeritcalDirectionBound) {\n    // left to right, right to left\n    var reversePos = getPosByDirection(poses, [verticalDirection[0] * -1, verticalDirection[1]]);\n    var nextDist = solveNextDist(reversePos, verticalPos, verticalBoundInfo.offset, verticalBoundInfo.isVertical, false, datas);\n\n    if (!isNaN(nextDist)) {\n      widthDist = nextDist;\n    }\n\n    var nextPoses = getFixedPoses(matrix, width + direction[0] * widthDist, height + direction[1] * heightDist, fixedPos, direction, is3d);\n    heightDist = checkOneWayPos(moveable, [getPosByDirection(nextPoses, direction)], [getPosByDirection(nextPoses, verticalDirection)], true, datas);\n  } else {\n    // top to bottom, bottom to top\n    var reversePos = getPosByDirection(poses, [horizontalDirection[0] * -1, horizontalDirection[1]]);\n    var nextDist = solveNextDist(reversePos, verticalPos, horizontalBoundInfo.offset, horizontalBoundInfo.isVertical, true, datas);\n\n    if (!isNaN(nextDist)) {\n      heightDist = nextDist;\n    }\n\n    var nextPoses = getFixedPoses(matrix, width + direction[0] * widthDist, height + direction[1] * heightDist, fixedPos, direction, is3d);\n    widthDist = checkOneWayPos(moveable, [getPosByDirection(nextPoses, direction)], [getPosByDirection(nextPoses, horizontalDirection)], false, datas);\n  }\n\n  return [direction[0] * widthDist, direction[1] * heightDist];\n}\n\nfunction checkSizeDist(moveable, matrix, width, height, direction, snapDirection, datas, is3d) {\n  var poses = getAbsolutePosesByState(moveable.state);\n  var fixedPos = getPosByReverseDirection(poses, snapDirection);\n  var nextPoses = getFixedPoses(matrix, width, height, fixedPos, direction, is3d);\n\n  if (direction[0] && direction[1]) {\n    return checkTwoWayDist(moveable, nextPoses, direction, datas, matrix, width, height, fixedPos, is3d);\n  } else {\n    return checkOneWayDist(moveable, nextPoses, direction, datas);\n  }\n}\n\nfunction checkSnapSize(moveable, width, height, direction, datas) {\n  if (!hasGuidelines(moveable, \"resizable\")) {\n    return [0, 0];\n  }\n\n  var _a = moveable.state,\n      matrix = _a.matrix,\n      is3d = _a.is3d;\n  return checkSizeDist(moveable, matrix, width, height, direction, direction, datas, is3d);\n}\n\nfunction checkSnapScale(moveable, scale, direction, snapDirection, datas) {\n  var width = datas.width,\n      height = datas.height;\n\n  if (!hasGuidelines(moveable, \"scalable\")) {\n    return [0, 0];\n  }\n\n  var sizeDist = checkSizeDist(moveable, scaleMatrix(datas, scale), width, height, direction, snapDirection, datas, datas.is3d);\n  return [sizeDist[0] / width, sizeDist[1] / height];\n}\n\nfunction solveEquation(pos1, pos2, snapOffset, isVertical) {\n  var dx = pos2[0] - pos1[0];\n  var dy = pos2[1] - pos1[1];\n\n  if (!dx) {\n    // y = 0 * x + b\n    // only horizontal\n    if (!isVertical) {\n      return [0, snapOffset];\n    }\n\n    return;\n  }\n\n  if (!dy) {\n    // only vertical\n    if (isVertical) {\n      return [snapOffset, 0];\n    }\n\n    return;\n  } // y = ax + b\n\n\n  var a = dy / dx;\n  var b = pos1[1] - a * pos1[0];\n\n  if (isVertical) {\n    // y = a * x + b\n    var y = a * (pos2[0] + snapOffset) + b;\n    return [snapOffset, y - pos2[1]];\n  } else {\n    // x = (y - b) / a\n    var x = (pos2[1] + snapOffset - b) / a;\n    return [x - pos2[0], snapOffset];\n  }\n}\n\nfunction getSnapInfosByDirection(moveable, poses, snapDirection) {\n  if (snapDirection === true) {\n    var rect = getRect(poses);\n    rect.middle = (rect.top + rect.bottom) / 2;\n    rect.center = (rect.left + rect.right) / 2;\n    return checkSnaps(moveable, rect, true, 1);\n  } else if (!snapDirection[0] && !snapDirection[1]) {\n    var alignPoses = [poses[0], poses[1], poses[3], poses[2], poses[0]];\n    var nextPoses = [];\n\n    for (var i = 0; i < 4; ++i) {\n      nextPoses.push(alignPoses[i]);\n      poses.push([(alignPoses[i][0] + alignPoses[i + 1][0]) / 2, (alignPoses[i][1] + alignPoses[i + 1][1]) / 2]);\n    }\n\n    return checkSnapPoses(moveable, nextPoses.map(function (pos) {\n      return pos[0];\n    }), nextPoses.map(function (pos) {\n      return pos[1];\n    }), true, 1);\n  } else {\n    var nextPoses = void 0;\n\n    if (moveable.props.keepRatio) {\n      nextPoses = [getPosByDirection(poses, snapDirection)];\n    } else {\n      nextPoses = getPosesByDirection(poses, snapDirection);\n\n      if (nextPoses.length > 1) {\n        nextPoses.push([(nextPoses[0][0] + nextPoses[1][0]) / 2, (nextPoses[0][1] + nextPoses[1][1]) / 2]);\n      }\n    }\n\n    return checkSnapPoses(moveable, nextPoses.map(function (pos) {\n      return pos[0];\n    }), nextPoses.map(function (pos) {\n      return pos[1];\n    }), true, 1);\n  }\n}\n\nfunction startCheckSnapDrag(moveable, datas) {\n  datas.absolutePoses = getAbsolutePosesByState(moveable.state);\n}\n\nfunction checkSnapDrag(moveable, distX, distY, datas) {\n  var snapVerticalInfo = {\n    isSnap: false,\n    offset: 0\n  };\n  var snapHorizontalInfo = {\n    isSnap: false,\n    offset: 0\n  };\n\n  if (!hasGuidelines(moveable, \"draggable\")) {\n    return [snapVerticalInfo, snapHorizontalInfo];\n  }\n\n  var poses = getAbsolutePoses(datas.absolutePoses, [distX, distY]);\n\n  var _a = getRect(poses),\n      left = _a.left,\n      right = _a.right,\n      top = _a.top,\n      bottom = _a.bottom;\n\n  var snapInfos = checkSnaps(moveable, {\n    left: left,\n    right: right,\n    top: top,\n    bottom: bottom,\n    center: (left + right) / 2,\n    middle: (top + bottom) / 2\n  }, true);\n  var boundInfos = checkBounds(moveable, [left, right], [top, bottom]);\n\n  if (boundInfos.vertical.isBound) {\n    snapVerticalInfo.offset = boundInfos.vertical.offset;\n    snapVerticalInfo.isSnap = true;\n  } else if (snapInfos.vertical.isSnap) {\n    // has vertical guidelines\n    snapVerticalInfo.offset = snapInfos.vertical.offset;\n    snapVerticalInfo.isSnap = true;\n  }\n\n  if (boundInfos.horizontal.isBound) {\n    snapHorizontalInfo.offset = boundInfos.horizontal.offset;\n    snapHorizontalInfo.isSnap = true;\n  } else if (snapInfos.horizontal.isSnap) {\n    // has horizontal guidelines\n    snapHorizontalInfo.offset = snapInfos.horizontal.offset;\n    snapHorizontalInfo.isSnap = true;\n  }\n\n  return [snapVerticalInfo, snapHorizontalInfo];\n}\n\nvar Snappable = {\n  name: \"snappable\",\n  render: function render(moveable, React) {\n    var _a = moveable.state,\n        targetTop = _a.top,\n        targetLeft = _a.left,\n        pos1 = _a.pos1,\n        pos2 = _a.pos2,\n        pos3 = _a.pos3,\n        pos4 = _a.pos4,\n        snapDirection = _a.snapDirection,\n        clientRect = _a.clientRect,\n        containerRect = _a.containerRect;\n    var clientLeft = clientRect.left - containerRect.left;\n    var clientTop = clientRect.top - containerRect.top;\n    var minLeft = Math.min(pos1[0], pos2[0], pos3[0], pos4[0]);\n    var minTop = Math.min(pos1[1], pos2[1], pos3[1], pos4[1]);\n\n    if (!snapDirection || !hasGuidelines(moveable, \"\")) {\n      return [];\n    }\n\n    var poses = getAbsolutePosesByState(moveable.state);\n\n    var _b = getRect(poses),\n        width = _b.width,\n        height = _b.height,\n        top = _b.top,\n        left = _b.left,\n        bottom = _b.bottom,\n        right = _b.right;\n\n    var _c = getSnapInfosByDirection(moveable, poses, snapDirection),\n        _d = _c.vertical,\n        verticalGuildelines = _d.guidelines,\n        verticalSnapPoses = _d.snapPoses,\n        _e = _c.horizontal,\n        horizontalGuidelines = _e.guidelines,\n        horizontalSnapPoses = _e.snapPoses;\n\n    var _f = checkBounds(moveable, [left, right], [top, bottom], 1),\n        _g = _f.vertical,\n        isVerticalBound = _g.isBound,\n        verticalBoundPos = _g.pos,\n        _h = _f.horizontal,\n        isHorizontalBound = _h.isBound,\n        horizontalBoundPos = _h.pos;\n\n    if (isVerticalBound && verticalSnapPoses.indexOf(verticalBoundPos) < 0) {\n      // verticalGuildelines.push({\n      //     type: \"vertical\",\n      //     pos: [verticalBoundPos, top],\n      //     size: height,\n      // });\n      verticalSnapPoses.push(verticalBoundPos);\n    }\n\n    if (isHorizontalBound && horizontalSnapPoses.indexOf(horizontalBoundPos) < 0) {\n      // horizontalGuidelines.push({\n      //     type: \"horizontal\",\n      //     pos: [left, horizontalBoundPos],\n      //     size: width,\n      // });\n      horizontalSnapPoses.push(horizontalBoundPos);\n    }\n\n    return verticalSnapPoses.map(function (pos, i) {\n      return React.createElement(\"div\", {\n        className: prefix(\"line\", \"vertical\", \"guideline\", \"target\", \"bold\"),\n        key: \"verticalTargetGuidline\" + i,\n        style: {\n          top: minTop + \"px\",\n          left: -targetLeft + pos + \"px\",\n          height: height + \"px\"\n        }\n      });\n    }).concat(horizontalSnapPoses.map(function (pos, i) {\n      return React.createElement(\"div\", {\n        className: prefix(\"line\", \"horizontal\", \"guideline\", \"target\", \"bold\"),\n        key: \"horizontalTargetGuidline\" + i,\n        style: {\n          top: -targetTop + pos + \"px\",\n          left: minLeft + \"px\",\n          width: width + \"px\"\n        }\n      });\n    }), verticalGuildelines.map(function (guideline, i) {\n      var pos = guideline.pos,\n          size = guideline.size,\n          element = guideline.element;\n      return React.createElement(\"div\", {\n        className: prefix(\"line\", \"vertical\", \"guideline\", element ? \"bold\" : \"\"),\n        key: \"verticalGuidline\" + i,\n        style: {\n          top: minTop - clientTop + pos[1] + \"px\",\n          left: -targetLeft + pos[0] + \"px\",\n          height: size + \"px\"\n        }\n      });\n    }), horizontalGuidelines.map(function (guideline, i) {\n      var pos = guideline.pos,\n          size = guideline.size,\n          element = guideline.element;\n      return React.createElement(\"div\", {\n        className: prefix(\"line\", \"horizontal\", \"guideline\", element ? \"bold\" : \"\"),\n        key: \"horizontalGuidline\" + i,\n        style: {\n          top: -targetTop + pos[1] + \"px\",\n          left: minLeft - clientLeft + pos[0] + \"px\",\n          width: size + \"px\"\n        }\n      });\n    }));\n  },\n  dragStart: function dragStart(moveable, e) {\n    moveable.state.snapDirection = true;\n    snapStart(moveable);\n  },\n  pinchStart: function pinchStart(moveable) {\n    this.unset(moveable);\n  },\n  dragEnd: function dragEnd(moveable) {\n    this.unset(moveable);\n  },\n  dragControlCondition: directionCondition,\n  dragControlStart: function dragControlStart(moveable, e) {\n    moveable.state.snapDirection = null;\n    snapStart(moveable);\n  },\n  dragControlEnd: function dragControlEnd(moveable) {\n    this.unset(moveable);\n  },\n  dragGroupStart: function dragGroupStart(moveable, e) {\n    moveable.state.snapDirection = true;\n    snapStart(moveable);\n  },\n  dragGroupEnd: function dragGroupEnd(moveable) {\n    this.unset(moveable);\n  },\n  dragGroupControlStart: function dragGroupControlStart(moveable, e) {\n    moveable.state.snapDirection = null;\n    snapStart(moveable);\n  },\n  dragGroupControlEnd: function dragGroupControlEnd(moveable) {\n    this.unset(moveable);\n  },\n  unset: function unset(moveable) {\n    var state = moveable.state;\n    state.enableSnap = false;\n    state.guidelines = [];\n    state.snapDirection = null;\n  }\n};\nvar Draggable = {\n  name: \"draggable\",\n  dragStart: function dragStart(moveable, e) {\n    var datas = e.datas,\n        parentEvent = e.parentEvent,\n        parentDragger = e.parentDragger;\n    var state = moveable.state;\n    var targetTransform = state.targetTransform,\n        target = state.target,\n        dragger = state.dragger;\n\n    if (dragger) {\n      return false;\n    }\n\n    state.dragger = parentDragger || moveable.targetDragger;\n    var style = window.getComputedStyle(target);\n    datas.datas = {};\n    datas.left = parseFloat(style.left || \"\") || 0;\n    datas.top = parseFloat(style.top || \"\") || 0;\n    datas.bottom = parseFloat(style.bottom || \"\") || 0;\n    datas.right = parseFloat(style.right || \"\") || 0;\n    datas.transform = targetTransform;\n    datas.startTranslate = [0, 0];\n    setDragStart(moveable, {\n      datas: datas\n    });\n    datas.prevDist = [0, 0];\n    datas.prevBeforeDist = [0, 0];\n    datas.isDrag = false;\n    startCheckSnapDrag(moveable, datas);\n    var params = fillParams(moveable, e, {\n      set: function set(translate) {\n        datas.startTranslate = translate;\n      }\n    });\n    var result = parentEvent || triggerEvent(moveable, \"onDragStart\", params);\n\n    if (result !== false) {\n      datas.isDrag = true;\n    } else {\n      state.dragger = null;\n      datas.isPinch = false;\n    }\n\n    return datas.isDrag ? params : false;\n  },\n  drag: function drag(moveable, e) {\n    var datas = e.datas,\n        parentEvent = e.parentEvent,\n        parentFlag = e.parentFlag;\n    var distX = e.distX,\n        distY = e.distY;\n    var isPinch = datas.isPinch,\n        isDrag = datas.isDrag,\n        prevDist = datas.prevDist,\n        prevBeforeDist = datas.prevBeforeDist,\n        transform = datas.transform,\n        startTranslate = datas.startTranslate;\n\n    if (!isDrag) {\n      return;\n    }\n\n    var props = moveable.props;\n    var parentMoveable = props.parentMoveable;\n    var throttleDrag = parentEvent ? 0 : props.throttleDrag || 0;\n    var isSnap = false;\n\n    if (!isPinch && !parentEvent && !parentFlag) {\n      var _a = checkSnapDrag(moveable, distX, distY, datas),\n          verticalInfo = _a[0],\n          horizontalInfo = _a[1];\n\n      isSnap = verticalInfo.isSnap || horizontalInfo.isSnap;\n      distX -= verticalInfo.offset;\n      distY -= horizontalInfo.offset;\n    }\n\n    datas.passDistX = distX;\n    datas.passDistY = distY;\n    var beforeTranslate = plus(getDragDist({\n      datas: datas,\n      distX: distX,\n      distY: distY\n    }, true), startTranslate);\n    var translate = plus(getDragDist({\n      datas: datas,\n      distX: distX,\n      distY: distY\n    }, false), startTranslate);\n\n    if (!isSnap) {\n      throttleArray(translate, throttleDrag);\n      throttleArray(beforeTranslate, throttleDrag);\n    }\n\n    var beforeDist = minus(beforeTranslate, startTranslate);\n    var dist = minus(translate, startTranslate);\n    var delta = minus(dist, prevDist);\n    var beforeDelta = minus(beforeDist, prevBeforeDist);\n    datas.prevDist = dist;\n    datas.prevBeforeDist = beforeDist;\n    var left = datas.left + beforeDist[0];\n    var top = datas.top + beforeDist[1];\n    var right = datas.right - beforeDist[0];\n    var bottom = datas.bottom - beforeDist[1];\n    var nextTransform = transform + \" translate(\" + dist[0] + \"px, \" + dist[1] + \"px)\";\n\n    if (!parentEvent && !parentMoveable && delta.every(function (num) {\n      return !num;\n    }) && beforeDelta.some(function (num) {\n      return !num;\n    })) {\n      return;\n    }\n\n    var params = fillParams(moveable, e, {\n      transform: nextTransform,\n      dist: dist,\n      delta: delta,\n      translate: translate,\n      beforeDist: beforeDist,\n      beforeDelta: beforeDelta,\n      beforeTranslate: beforeTranslate,\n      left: left,\n      top: top,\n      right: right,\n      bottom: bottom,\n      isPinch: isPinch\n    });\n    !parentEvent && triggerEvent(moveable, \"onDrag\", params);\n    return params;\n  },\n  dragEnd: function dragEnd(moveable, e) {\n    var parentEvent = e.parentEvent,\n        datas = e.datas,\n        isDrag = e.isDrag;\n\n    if (!datas.isDrag) {\n      return;\n    }\n\n    moveable.state.dragger = null;\n    datas.isDrag = false;\n    !parentEvent && triggerEvent(moveable, \"onDragEnd\", fillParams(moveable, e, {\n      isDrag: isDrag\n    }));\n    return isDrag;\n  },\n  dragGroupStart: function dragGroupStart(moveable, e) {\n    var datas = e.datas;\n    var params = this.dragStart(moveable, e);\n\n    if (!params) {\n      return false;\n    }\n\n    var events = triggerChildAble(moveable, this, \"dragStart\", datas, e);\n\n    var nextParams = _assign({}, params, {\n      targets: moveable.props.targets,\n      events: events\n    });\n\n    var result = triggerEvent(moveable, \"onDragGroupStart\", nextParams);\n    datas.isDrag = result !== false;\n    return datas.isDrag ? params : false;\n  },\n  dragGroup: function dragGroup(moveable, e) {\n    var datas = e.datas;\n\n    if (!datas.isDrag) {\n      return;\n    }\n\n    var params = this.drag(moveable, e);\n    var _a = e.datas,\n        passDistX = _a.passDistX,\n        passDistY = _a.passDistY;\n    var events = triggerChildAble(moveable, this, \"drag\", datas, _assign({}, e, {\n      distX: passDistX,\n      distY: passDistY\n    }));\n\n    if (!params) {\n      return;\n    }\n\n    var nextParams = _assign({\n      targets: moveable.props.targets,\n      events: events\n    }, params);\n\n    triggerEvent(moveable, \"onDragGroup\", nextParams);\n    return nextParams;\n  },\n  dragGroupEnd: function dragGroupEnd(moveable, e) {\n    var isDrag = e.isDrag,\n        datas = e.datas;\n\n    if (!datas.isDrag) {\n      return;\n    }\n\n    this.dragEnd(moveable, e);\n    triggerChildAble(moveable, this, \"dragEnd\", datas, e);\n    triggerEvent(moveable, \"onDragGroupEnd\", fillParams(moveable, e, {\n      targets: moveable.props.targets,\n      isDrag: isDrag\n    }));\n    return isDrag;\n  }\n};\n\nfunction setCustomDrag(state, delta, inputEvent) {\n  return _assign({}, state.dragger.move(delta, inputEvent), {\n    parentEvent: true\n  });\n}\n\nvar CustomDragger = /*#__PURE__*/function () {\n  function CustomDragger() {\n    this.prevX = 0;\n    this.prevY = 0;\n    this.startX = 0;\n    this.startY = 0;\n    this.isDrag = false;\n    this.isFlag = false;\n    this.datas = {};\n  }\n\n  var __proto = CustomDragger.prototype;\n\n  __proto.dragStart = function (client, inputEvent) {\n    this.isDrag = false;\n    this.isFlag = false;\n    this.datas = {};\n    return this.move(client, inputEvent);\n  };\n\n  __proto.drag = function (client, inputEvent) {\n    return this.move([client[0] - this.prevX, client[1] - this.prevY], inputEvent);\n  };\n\n  __proto.move = function (delta, inputEvent) {\n    var clientX;\n    var clientY;\n\n    if (!this.isFlag) {\n      this.prevX = delta[0];\n      this.prevY = delta[1];\n      this.startX = delta[0];\n      this.startY = delta[1];\n      clientX = delta[0];\n      clientY = delta[1];\n      this.isFlag = true;\n    } else {\n      clientX = this.prevX + delta[0];\n      clientY = this.prevY + delta[1];\n      this.isDrag = true;\n    }\n\n    this.prevX = clientX;\n    this.prevY = clientY;\n    return {\n      clientX: clientX,\n      clientY: clientY,\n      inputEvent: inputEvent,\n      isDrag: this.isDrag,\n      distX: clientX - this.startX,\n      distY: clientY - this.startY,\n      deltaX: delta[0],\n      deltaY: delta[1],\n      datas: this.datas,\n      parentEvent: true,\n      parentDragger: this\n    };\n  };\n\n  return CustomDragger;\n}();\n\nfunction setRotateStartInfo(datas, clientX, clientY, origin, rotationPos) {\n  datas.startAbsoluteOrigin = [clientX - rotationPos[0] + origin[0], clientY - rotationPos[1] + origin[1]];\n  datas.prevDeg = getRad(datas.startAbsoluteOrigin, [clientX, clientY]) / Math.PI * 180;\n  datas.startDeg = datas.prevDeg;\n  datas.loop = 0;\n}\n\nfunction getDeg(datas, deg, direction, startRotate, throttleRotate) {\n  var prevDeg = datas.prevDeg,\n      startDeg = datas.startDeg,\n      prevLoop = datas.loop;\n\n  if (prevDeg > deg && prevDeg > 270 && deg < 90) {\n    // 360 => 0\n    ++datas.loop;\n  } else if (prevDeg < deg && prevDeg < 90 && deg > 270) {\n    // 0 => 360\n    --datas.loop;\n  }\n\n  var loop = datas.loop;\n  var absolutePrevDeg = prevLoop * 360 + prevDeg - startDeg + startRotate;\n  var absoluteDeg = loop * 360 + deg - startDeg + startRotate;\n  absoluteDeg = throttle(absoluteDeg, throttleRotate);\n  var delta = direction * (absoluteDeg - absolutePrevDeg);\n  var dist = direction * (absoluteDeg - startRotate);\n  datas.prevDeg = absoluteDeg - loop * 360 + startDeg - startRotate;\n  return [delta, dist, absoluteDeg];\n}\n\nfunction getRotateInfo(datas, direction, clientX, clientY, startRotate, throttleRotate) {\n  return getDeg(datas, getRad(datas.startAbsoluteOrigin, [clientX, clientY]) / Math.PI * 180, direction, startRotate, throttleRotate);\n}\n\nfunction getPositions(rotationPosition, pos1, pos2, pos3, pos4) {\n  if (rotationPosition === \"left\") {\n    return [pos3, pos1];\n  } else if (rotationPosition === \"right\") {\n    return [pos2, pos4];\n  } else if (rotationPosition === \"bottom\") {\n    return [pos4, pos3];\n  }\n\n  return [pos1, pos2];\n}\n\nfunction getRotationRad(poses, direction) {\n  return getRad(direction > 0 ? poses[0] : poses[1], direction > 0 ? poses[1] : poses[0]);\n}\n\nfunction getRotationPosition(_a, rad) {\n  var pos1 = _a[0],\n      pos2 = _a[1];\n  var relativeRotationPos = rotate([0, -40, 1], rad);\n  var rotationPos = [(pos1[0] + pos2[0]) / 2 + relativeRotationPos[0], (pos1[1] + pos2[1]) / 2 + relativeRotationPos[1]];\n  return rotationPos;\n}\n\nfunction dragControlCondition(target) {\n  return hasClass(target, prefix(\"rotation\"));\n}\n\nvar Rotatable = {\n  name: \"rotatable\",\n  canPinch: true,\n  render: function render(moveable, React) {\n    var _a = moveable.props,\n        rotatable = _a.rotatable,\n        rotationPosition = _a.rotationPosition;\n\n    if (!rotatable) {\n      return null;\n    }\n\n    var _b = moveable.state,\n        pos1 = _b.pos1,\n        pos2 = _b.pos2,\n        pos3 = _b.pos3,\n        pos4 = _b.pos4,\n        direction = _b.direction;\n    var poses = getPositions(rotationPosition, pos1, pos2, pos3, pos4);\n    var rotationRad = getRotationRad(poses, direction);\n    return React.createElement(\"div\", {\n      key: \"rotation\",\n      className: prefix(\"line rotation-line\"),\n      style: {\n        // tslint:disable-next-line: max-line-length\n        transform: \"translate(\" + (poses[0][0] + poses[1][0]) / 2 + \"px, \" + (poses[0][1] + poses[1][1]) / 2 + \"px) translateY(-40px) rotate(\" + rotationRad + \"rad)\"\n      }\n    }, React.createElement(\"div\", {\n      className: prefix(\"control\", \"rotation\")\n    }));\n  },\n  dragControlCondition: dragControlCondition,\n  dragControlStart: function dragControlStart(moveable, e) {\n    var datas = e.datas,\n        clientX = e.clientX,\n        clientY = e.clientY,\n        parentRotate = e.parentRotate,\n        parentFlag = e.parentFlag,\n        pinchFlag = e.pinchFlag;\n    var _a = moveable.state,\n        target = _a.target,\n        left = _a.left,\n        top = _a.top,\n        origin = _a.origin,\n        beforeOrigin = _a.beforeOrigin,\n        direction = _a.direction,\n        beforeDirection = _a.beforeDirection,\n        targetTransform = _a.targetTransform,\n        pos1 = _a.pos1,\n        pos2 = _a.pos2,\n        pos3 = _a.pos3,\n        pos4 = _a.pos4;\n\n    if (!target) {\n      return false;\n    }\n\n    datas.transform = targetTransform;\n    datas.left = left;\n    datas.top = top;\n    var poses = getPositions(moveable.props.rotationPosition, pos1, pos2, pos3, pos4);\n    var rotationPos = getRotationPosition(poses, getRotationRad(poses, direction));\n\n    if (pinchFlag || parentFlag) {\n      datas.beforeInfo = {\n        prevDeg: parentRotate,\n        startDeg: parentRotate,\n        loop: 0\n      };\n      datas.afterInfo = {\n        prevDeg: parentRotate,\n        startDeg: parentRotate,\n        loop: 0\n      };\n    } else {\n      datas.afterInfo = {};\n      datas.beforeInfo = {};\n      setRotateStartInfo(datas.afterInfo, clientX, clientY, origin, rotationPos);\n      setRotateStartInfo(datas.beforeInfo, clientX, clientY, beforeOrigin, rotationPos);\n    }\n\n    datas.direction = direction;\n    datas.beforeDirection = beforeDirection;\n    datas.startRotate = 0;\n    datas.datas = {};\n    var params = fillParams(moveable, e, {\n      set: function set(rotatation) {\n        datas.startRotate = rotatation;\n      }\n    });\n    var result = triggerEvent(moveable, \"onRotateStart\", params);\n    datas.isRotate = result !== false;\n    return datas.isRotate ? params : false;\n  },\n  dragControl: function dragControl(moveable, e) {\n    var _a, _b, _c, _d;\n\n    var datas = e.datas,\n        clientX = e.clientX,\n        clientY = e.clientY,\n        parentRotate = e.parentRotate,\n        parentFlag = e.parentFlag,\n        pinchFlag = e.pinchFlag;\n    var direction = datas.direction,\n        beforeDirection = datas.beforeDirection,\n        beforeInfo = datas.beforeInfo,\n        afterInfo = datas.afterInfo,\n        isRotate = datas.isRotate,\n        startRotate = datas.startRotate;\n\n    if (!isRotate) {\n      return;\n    }\n\n    var _e = moveable.props,\n        _f = _e.throttleRotate,\n        throttleRotate = _f === void 0 ? 0 : _f,\n        parentMoveable = _e.parentMoveable;\n    var delta;\n    var dist;\n    var rotate;\n    var beforeDelta;\n    var beforeDist;\n    var beforeRotate;\n\n    if (pinchFlag || parentFlag) {\n      _a = getDeg(afterInfo, parentRotate, direction, startRotate, throttleRotate), delta = _a[0], dist = _a[1], rotate = _a[2];\n      _b = getDeg(beforeInfo, parentRotate, direction, startRotate, throttleRotate), beforeDelta = _b[0], beforeDist = _b[1], beforeRotate = _b[2];\n    } else {\n      _c = getRotateInfo(afterInfo, direction, clientX, clientY, startRotate, throttleRotate), delta = _c[0], dist = _c[1], rotate = _c[2];\n      _d = getRotateInfo(beforeInfo, beforeDirection, clientX, clientY, startRotate, throttleRotate), beforeDelta = _d[0], beforeDist = _d[1], beforeRotate = _d[2];\n    }\n\n    if (!delta && !beforeDelta && !parentMoveable) {\n      return;\n    }\n\n    var params = fillParams(moveable, e, {\n      delta: delta,\n      dist: dist,\n      rotate: rotate,\n      beforeDist: beforeDist,\n      beforeDelta: beforeDelta,\n      beforeRotate: beforeRotate,\n      transform: datas.transform + \" rotate(\" + dist + \"deg)\",\n      isPinch: !!pinchFlag\n    });\n    triggerEvent(moveable, \"onRotate\", params);\n    return params;\n  },\n  dragControlEnd: function dragControlEnd(moveable, e) {\n    var datas = e.datas,\n        isDrag = e.isDrag;\n\n    if (!datas.isRotate) {\n      return false;\n    }\n\n    datas.isRotate = false;\n    triggerEvent(moveable, \"onRotateEnd\", fillParams(moveable, e, {\n      isDrag: isDrag\n    }));\n    return isDrag;\n  },\n  dragGroupControlCondition: dragControlCondition,\n  dragGroupControlStart: function dragGroupControlStart(moveable, e) {\n    var datas = e.datas,\n        inputEvent = e.inputEvent;\n    var _a = moveable.state,\n        parentLeft = _a.left,\n        parentTop = _a.top,\n        parentBeforeOrigin = _a.beforeOrigin;\n    var params = this.dragControlStart(moveable, e);\n\n    if (!params) {\n      return false;\n    }\n\n    var events = triggerChildAble(moveable, this, \"dragControlStart\", datas, _assign({}, e, {\n      parentRotate: 0\n    }), function (child, childDatas, eventParams) {\n      var _a = child.state,\n          left = _a.left,\n          top = _a.top,\n          beforeOrigin = _a.beforeOrigin;\n      var childClient = plus(minus([left, top], [parentLeft, parentTop]), minus(beforeOrigin, parentBeforeOrigin));\n      childDatas.prevClient = childClient;\n      eventParams.dragStart = Draggable.dragStart(child, new CustomDragger().dragStart(childClient, inputEvent));\n    });\n\n    var nextParams = _assign({}, params, {\n      targets: moveable.props.targets,\n      events: events\n    });\n\n    var result = triggerEvent(moveable, \"onRotateGroupStart\", nextParams);\n    datas.isRotate = result !== false;\n    return datas.isDrag ? params : false;\n  },\n  dragGroupControl: function dragGroupControl(moveable, e) {\n    var inputEvent = e.inputEvent,\n        datas = e.datas;\n\n    if (!datas.isRotate) {\n      return;\n    }\n\n    var params = this.dragControl(moveable, e);\n\n    if (!params) {\n      return;\n    }\n\n    var parentRotate = params.beforeDist;\n    var deg = params.beforeDelta;\n    var rad = deg / 180 * Math.PI;\n    var events = triggerChildAble(moveable, this, \"dragControl\", datas, _assign({}, e, {\n      parentRotate: parentRotate\n    }), function (child, childDatas, result, i) {\n      var _a = childDatas.prevClient,\n          prevX = _a[0],\n          prevY = _a[1];\n\n      var _b = rotate([prevX, prevY], rad),\n          clientX = _b[0],\n          clientY = _b[1];\n\n      var delta = [clientX - prevX, clientY - prevY];\n      childDatas.prevClient = [clientX, clientY];\n      var dragResult = Draggable.drag(child, setCustomDrag(child.state, delta, inputEvent));\n      result.drag = dragResult;\n    });\n\n    var nextParams = _assign({\n      targets: moveable.props.targets,\n      events: events\n    }, params);\n\n    moveable.rotation += params.beforeDelta;\n    triggerEvent(moveable, \"onRotateGroup\", nextParams);\n    return nextParams;\n  },\n  dragGroupControlEnd: function dragGroupControlEnd(moveable, e) {\n    var isDrag = e.isDrag,\n        datas = e.datas;\n\n    if (!datas.isRotate) {\n      return;\n    }\n\n    this.dragControlEnd(moveable, e);\n    triggerChildAble(moveable, this, \"dragControlEnd\", datas, e);\n    var nextParams = fillParams(moveable, e, {\n      targets: moveable.props.targets,\n      isDrag: isDrag\n    });\n    triggerEvent(moveable, \"onRotateGroupEnd\", nextParams);\n    return isDrag;\n  }\n};\n\nfunction renderControls(moveable, defaultDirections, React) {\n  var _a = moveable.state,\n      pos1 = _a.pos1,\n      pos2 = _a.pos2,\n      pos3 = _a.pos3,\n      pos4 = _a.pos4;\n  var _b = moveable.props.renderDirections,\n      directions = _b === void 0 ? defaultDirections : _b;\n  var poses = [pos1, pos2, pos3, pos4];\n  var directionMap = {};\n  directions.forEach(function (direction) {\n    directionMap[direction] = true;\n  });\n  return directions.map(function (direction) {\n    var indexes = DIRECTION_INDEXES[direction];\n\n    if (!indexes || !directionMap[direction]) {\n      return null;\n    }\n\n    return React.createElement(\"div\", {\n      className: prefix(\"control\", \"direction\", direction),\n      \"data-direction\": direction,\n      key: direction,\n      style: getControlTransform.apply(void 0, indexes.map(function (index) {\n        return poses[index];\n      }))\n    });\n  });\n}\n\nfunction renderAllDirections(moveable, React) {\n  return renderControls(moveable, [\"nw\", \"ne\", \"sw\", \"se\", \"n\", \"w\", \"s\", \"e\"], React);\n}\n\nfunction renderDiagonalDirections(moveable, React) {\n  return renderControls(moveable, [\"nw\", \"ne\", \"sw\", \"se\"], React);\n}\n\nvar Resizable = {\n  name: \"resizable\",\n  ableGroup: \"size\",\n  updateRect: true,\n  canPinch: true,\n  render: function render(moveable, React) {\n    var _a = moveable.props,\n        resizable = _a.resizable,\n        edge = _a.edge;\n\n    if (resizable) {\n      if (edge) {\n        return renderDiagonalDirections(moveable, React);\n      }\n\n      return renderAllDirections(moveable, React);\n    }\n  },\n  dragControlCondition: directionCondition,\n  dragControlStart: function dragControlStart(moveable, e) {\n    var inputEvent = e.inputEvent,\n        pinchFlag = e.pinchFlag,\n        datas = e.datas;\n    var inputTarget = inputEvent.target;\n    var direction = pinchFlag ? [1, 1] : getDirection(inputTarget);\n    var _a = moveable.state,\n        target = _a.target,\n        width = _a.width,\n        height = _a.height;\n\n    if (!direction || !target) {\n      return false;\n    }\n\n    !pinchFlag && setDragStart(moveable, {\n      datas: datas\n    });\n    datas.datas = {};\n    datas.direction = direction;\n    datas.offsetWidth = width;\n    datas.offsetHeight = height;\n    datas.prevWidth = 0;\n    datas.prevHeight = 0;\n    datas.width = width;\n    datas.height = height;\n    datas.transformOrigin = moveable.props.transformOrigin;\n    var params = fillParams(moveable, e, {\n      direction: direction,\n      set: function set(_a) {\n        var startWidth = _a[0],\n            startHeight = _a[1];\n        datas.width = startWidth;\n        datas.height = startHeight;\n      },\n      setOrigin: function setOrigin(origin) {\n        datas.transformOrigin = origin;\n      },\n      dragStart: Draggable.dragStart(moveable, new CustomDragger().dragStart([0, 0], inputEvent))\n    });\n    var result = triggerEvent(moveable, \"onResizeStart\", params);\n\n    if (result !== false) {\n      datas.isResize = true;\n      moveable.state.snapDirection = direction;\n    }\n\n    return datas.isResize ? params : false;\n  },\n  dragControl: function dragControl(moveable, e) {\n    var datas = e.datas,\n        distX = e.distX,\n        distY = e.distY,\n        parentFlag = e.parentFlag,\n        pinchFlag = e.pinchFlag,\n        parentDistance = e.parentDistance,\n        parentScale = e.parentScale,\n        inputEvent = e.inputEvent,\n        dragClient = e.dragClient;\n    var direction = datas.direction,\n        width = datas.width,\n        height = datas.height,\n        offsetWidth = datas.offsetWidth,\n        offsetHeight = datas.offsetHeight,\n        prevWidth = datas.prevWidth,\n        prevHeight = datas.prevHeight,\n        isResize = datas.isResize,\n        transformOrigin = datas.transformOrigin;\n\n    if (!isResize) {\n      return;\n    }\n\n    var _a = moveable.props,\n        _b = _a.throttleResize,\n        throttleResize = _b === void 0 ? 0 : _b,\n        parentMoveable = _a.parentMoveable;\n    var keepRatio = moveable.props.keepRatio || parentScale;\n    var isWidth = direction[0] || !direction[1];\n    var ratio = isWidth ? offsetHeight / offsetWidth : offsetWidth / offsetHeight;\n    var distWidth = 0;\n    var distHeight = 0; // diagonal\n\n    if (parentScale) {\n      distWidth = (parentScale[0] - 1) * offsetWidth;\n      distHeight = (parentScale[1] - 1) * offsetHeight;\n    } else if (pinchFlag) {\n      if (parentDistance) {\n        distWidth = parentDistance;\n        distHeight = parentDistance * offsetHeight / offsetWidth;\n      }\n    } else {\n      var dist = getDragDist({\n        datas: datas,\n        distX: distX,\n        distY: distY\n      });\n      distWidth = direction[0] * dist[0];\n      distHeight = direction[1] * dist[1];\n\n      if (keepRatio && offsetWidth && offsetHeight) {\n        var rad = getRad([0, 0], dist);\n        var standardRad = getRad([0, 0], direction);\n        var ratioRad = getRad([0, 0], [offsetWidth, offsetHeight]);\n        var size = Math.sqrt(distWidth * distWidth + distHeight * distHeight);\n        var signSize = Math.cos(rad - standardRad) * size;\n\n        if (!direction[0]) {\n          // top, bottom\n          distHeight = signSize;\n          distWidth = getKeepRatioWidth(distHeight, isWidth, ratio);\n        } else if (!direction[1]) {\n          // left, right\n          distWidth = signSize;\n          distHeight = getKeepRatioHeight(distWidth, isWidth, ratio);\n        } else {\n          // two-way\n          distWidth = Math.cos(ratioRad) * signSize;\n          distHeight = Math.sin(ratioRad) * signSize;\n        }\n      }\n    }\n\n    var nextWidth = direction[0] || keepRatio ? Math.max(offsetWidth + distWidth, 0) : offsetWidth;\n    var nextHeight = direction[1] || keepRatio ? Math.max(offsetHeight + distHeight, 0) : offsetHeight;\n    var snapDist = [0, 0];\n\n    if (!pinchFlag) {\n      snapDist = checkSnapSize(moveable, nextWidth, nextHeight, direction, datas);\n    }\n\n    if (keepRatio) {\n      if (direction[0] && direction[1] && snapDist[0] && snapDist[1]) {\n        if (Math.abs(snapDist[0]) > Math.abs(snapDist[1])) {\n          snapDist[1] = 0;\n        } else {\n          snapDist[0] = 0;\n        }\n      }\n\n      var isNoSnap = !snapDist[0] && !snapDist[1];\n\n      if (isNoSnap) {\n        if (isWidth) {\n          nextWidth = throttle(nextWidth, throttleResize);\n        } else {\n          nextHeight = throttle(nextHeight, throttleResize);\n        }\n      }\n\n      if (direction[0] && !direction[1] || snapDist[0] && !snapDist[1] || isNoSnap && isWidth) {\n        nextWidth += snapDist[0];\n        nextHeight = getKeepRatioHeight(nextWidth, isWidth, ratio);\n      } else if (!direction[0] && direction[1] || !snapDist[0] && snapDist[1] || isNoSnap && !isWidth) {\n        nextHeight += snapDist[1];\n        nextWidth = getKeepRatioWidth(nextHeight, isWidth, ratio);\n      }\n    } else {\n      if (!snapDist[0]) {\n        nextWidth = throttle(nextWidth, throttleResize);\n      }\n\n      if (!snapDist[1]) {\n        nextHeight = throttle(nextHeight, throttleResize);\n      }\n    }\n\n    nextWidth = Math.round(nextWidth);\n    nextHeight = Math.round(nextHeight);\n    distWidth = nextWidth - offsetWidth;\n    distHeight = nextHeight - offsetHeight;\n    var delta = [distWidth - prevWidth, distHeight - prevHeight];\n    datas.prevWidth = distWidth;\n    datas.prevHeight = distHeight;\n\n    if (!parentMoveable && delta.every(function (num) {\n      return !num;\n    })) {\n      return;\n    }\n\n    var inverseDelta = !parentFlag && pinchFlag ? [0, 0] : getResizeDist(moveable, nextWidth, nextHeight, direction, transformOrigin, dragClient);\n    var params = fillParams(moveable, e, {\n      width: width + distWidth,\n      height: height + distHeight,\n      offsetWidth: nextWidth,\n      offsetHeight: nextHeight,\n      direction: direction,\n      dist: [distWidth, distHeight],\n      delta: delta,\n      isPinch: !!pinchFlag,\n      drag: Draggable.drag(moveable, setCustomDrag(moveable.state, inverseDelta, inputEvent))\n    });\n    triggerEvent(moveable, \"onResize\", params);\n    return params;\n  },\n  dragControlEnd: function dragControlEnd(moveable, e) {\n    var datas = e.datas,\n        isDrag = e.isDrag;\n\n    if (!datas.isResize) {\n      return false;\n    }\n\n    datas.isResize = false;\n    var params = fillParams(moveable, e, {\n      isDrag: isDrag\n    });\n    triggerEvent(moveable, \"onResizeEnd\", params);\n    return isDrag;\n  },\n  dragGroupControlCondition: directionCondition,\n  dragGroupControlStart: function dragGroupControlStart(moveable, e) {\n    var datas = e.datas;\n    var params = this.dragControlStart(moveable, e);\n\n    if (!params) {\n      return false;\n    }\n\n    var direction = params.direction;\n    var startPos = getPosByReverseDirection(getAbsolutePosesByState(moveable.state), direction);\n    var events = triggerChildAble(moveable, this, \"dragControlStart\", datas, function (child, childDatas) {\n      var pos = getPosByReverseDirection(getAbsolutePosesByState(child.state), direction);\n\n      var _a = caculate(createRotateMatrix(-moveable.rotation / 180 * Math.PI, 3), [pos[0] - startPos[0], pos[1] - startPos[1], 1], 3),\n          originalX = _a[0],\n          originalY = _a[1];\n\n      childDatas.originalX = originalX;\n      childDatas.originalY = originalY;\n      return e;\n    });\n\n    var nextParams = _assign({}, params, {\n      targets: moveable.props.targets,\n      events: events\n    });\n\n    var result = triggerEvent(moveable, \"onResizeGroupStart\", nextParams);\n    datas.isResize = result !== false;\n    return datas.isResize ? params : false;\n  },\n  dragGroupControl: function dragGroupControl(moveable, e) {\n    var datas = e.datas;\n\n    if (!datas.isResize) {\n      return;\n    }\n\n    var params = this.dragControl(moveable, e);\n\n    if (!params) {\n      return;\n    }\n\n    var offsetWidth = params.offsetWidth,\n        offsetHeight = params.offsetHeight,\n        dist = params.dist,\n        direction = params.direction;\n    var parentScale = [offsetWidth / (offsetWidth - dist[0]), offsetHeight / (offsetHeight - dist[1])];\n    var prevPos = getPosByReverseDirection(getAbsolutePosesByState(moveable.state), direction);\n    var events = triggerChildAble(moveable, this, \"dragControl\", datas, function (_, childDatas) {\n      var _a = caculate(createRotateMatrix(moveable.rotation / 180 * Math.PI, 3), [childDatas.originalX * parentScale[0], childDatas.originalY * parentScale[1], 1], 3),\n          clientX = _a[0],\n          clientY = _a[1];\n\n      return _assign({}, e, {\n        parentScale: parentScale,\n        dragClient: plus(prevPos, [clientX, clientY])\n      });\n    });\n\n    var nextParams = _assign({\n      targets: moveable.props.targets,\n      events: events\n    }, params);\n\n    triggerEvent(moveable, \"onResizeGroup\", nextParams);\n    return nextParams;\n  },\n  dragGroupControlEnd: function dragGroupControlEnd(moveable, e) {\n    var isDrag = e.isDrag,\n        datas = e.datas;\n\n    if (!datas.isResize) {\n      return;\n    }\n\n    this.dragControlEnd(moveable, e);\n    triggerChildAble(moveable, this, \"dragControlEnd\", datas, e);\n    var nextParams = fillParams(moveable, e, {\n      targets: moveable.props.targets,\n      isDrag: isDrag\n    });\n    triggerEvent(moveable, \"onResizeGroupEnd\", nextParams);\n    return isDrag;\n  }\n};\nvar Scalable = {\n  name: \"scalable\",\n  ableGroup: \"size\",\n  canPinch: true,\n  render: function render(moveable, React) {\n    var _a = moveable.props,\n        resizable = _a.resizable,\n        scalable = _a.scalable,\n        edge = _a.edge;\n\n    if (!resizable && scalable) {\n      if (edge) {\n        return renderDiagonalDirections(moveable, React);\n      }\n\n      return renderAllDirections(moveable, React);\n    }\n  },\n  dragControlCondition: directionCondition,\n  dragControlStart: function dragControlStart(moveable, e) {\n    var datas = e.datas,\n        pinchFlag = e.pinchFlag,\n        inputEvent = e.inputEvent;\n    var inputTarget = inputEvent.target;\n    var direction = pinchFlag ? [1, 1] : getDirection(inputTarget);\n    var _a = moveable.state,\n        width = _a.width,\n        height = _a.height,\n        targetTransform = _a.targetTransform,\n        target = _a.target;\n\n    if (!direction || !target) {\n      return false;\n    }\n\n    if (!pinchFlag) {\n      setDragStart(moveable, {\n        datas: datas\n      });\n    }\n\n    datas.datas = {};\n    datas.transform = targetTransform;\n    datas.prevDist = [1, 1];\n    datas.direction = direction;\n    datas.width = width;\n    datas.height = height;\n    datas.startScale = [1, 1];\n    var params = fillParams(moveable, e, {\n      direction: direction,\n      set: function set(scale) {\n        datas.startScale = scale;\n      },\n      dragStart: Draggable.dragStart(moveable, new CustomDragger().dragStart([0, 0], inputEvent))\n    });\n    var result = triggerEvent(moveable, \"onScaleStart\", params);\n\n    if (result !== false) {\n      datas.isScale = true;\n      moveable.state.snapDirection = direction;\n    }\n\n    return datas.isScale ? params : false;\n  },\n  dragControl: function dragControl(moveable, e) {\n    var datas = e.datas,\n        distX = e.distX,\n        distY = e.distY,\n        parentScale = e.parentScale,\n        parentDistance = e.parentDistance,\n        parentFlag = e.parentFlag,\n        pinchFlag = e.pinchFlag,\n        inputEvent = e.inputEvent,\n        dragClient = e.dragClient;\n    var prevDist = datas.prevDist,\n        direction = datas.direction,\n        width = datas.width,\n        height = datas.height,\n        transform = datas.transform,\n        isScale = datas.isScale,\n        startScale = datas.startScale;\n\n    if (!isScale) {\n      return false;\n    }\n\n    var _a = moveable.props,\n        throttleScale = _a.throttleScale,\n        parentMoveable = _a.parentMoveable;\n    var keepRatio = moveable.props.keepRatio || parentScale;\n    var state = moveable.state;\n    var isWidth = direction[0] || !direction[1];\n    var scaleX = 1;\n    var scaleY = 1;\n    var startWidth = width * startScale[0];\n    var startHeight = height * startScale[1];\n    var ratio = isWidth ? startHeight / startWidth : startWidth / startHeight;\n\n    if (parentScale) {\n      scaleX = parentScale[0];\n      scaleY = parentScale[1];\n    } else if (pinchFlag) {\n      if (parentDistance) {\n        scaleX = (width + parentDistance) / width;\n        scaleY = (height + parentDistance * height / width) / height;\n      }\n    } else {\n      var dist = getDragDist({\n        datas: datas,\n        distX: distX,\n        distY: distY\n      });\n      var distWidth = direction[0] * dist[0];\n      var distHeight = direction[1] * dist[1];\n\n      if (keepRatio && width && height) {\n        var rad = getRad([0, 0], dist);\n        var standardRad = getRad([0, 0], direction);\n        var ratioRad = getRad([0, 0], [startWidth, startHeight]);\n        var size = Math.sqrt(distWidth * distWidth + distHeight * distHeight);\n        var signSize = Math.cos(rad - standardRad) * size;\n\n        if (!direction[0]) {\n          // top, bottom\n          distHeight = signSize;\n          distWidth = getKeepRatioWidth(distHeight, isWidth, ratio);\n        } else if (!direction[1]) {\n          // left, right\n          distWidth = signSize;\n          distHeight = getKeepRatioHeight(distWidth, isWidth, ratio);\n        } else {\n          // two-way\n          distWidth = Math.cos(ratioRad) * signSize;\n          distHeight = Math.sin(ratioRad) * signSize;\n        }\n      }\n\n      scaleX = (width + distWidth) / width;\n      scaleY = (height + distHeight) / height;\n    }\n\n    scaleX = direction[0] ? scaleX * startScale[0] : startScale[0];\n    scaleY = direction[1] ? scaleY * startScale[1] : startScale[1];\n\n    if (scaleX === 0) {\n      scaleX = (prevDist[0] > 0 ? 1 : -1) * MIN_SCALE;\n    }\n\n    if (scaleY === 0) {\n      scaleY = (prevDist[1] > 0 ? 1 : -1) * MIN_SCALE;\n    }\n\n    var nowDist = [scaleX / startScale[0], scaleY / startScale[1]];\n    var scale = [scaleX, scaleY];\n    var snapDirection = direction;\n\n    if (moveable.props.groupable) {\n      snapDirection = [(nowDist[0] >= 0 ? 1 : -1) * direction[0], (nowDist[1] >= 0 ? 1 : -1) * direction[1]];\n      var stateDirection = state.snapDirection;\n\n      if (isArray(stateDirection) && (stateDirection[0] || stateDirection[1])) {\n        state.snapDirection = snapDirection;\n      }\n    }\n\n    var snapDist = [0, 0];\n\n    if (!pinchFlag) {\n      snapDist = checkSnapScale(moveable, nowDist, direction, snapDirection, datas);\n    }\n\n    if (keepRatio) {\n      if (direction[0] && direction[1] && snapDist[0] && snapDist[1]) {\n        if (Math.abs(snapDist[0]) > Math.abs(snapDist[1])) {\n          snapDist[1] = 0;\n        } else {\n          snapDist[0] = 0;\n        }\n      }\n\n      var isNoSnap = !snapDist[0] && !snapDist[1];\n\n      if (isNoSnap) {\n        if (isWidth) {\n          nowDist[0] = throttle(nowDist[0] * startScale[0], throttleScale) / startScale[0];\n        } else {\n          nowDist[1] = throttle(nowDist[1] * startScale[1], throttleScale) / startScale[1];\n        }\n      }\n\n      if (direction[0] && !direction[1] || snapDist[0] && !snapDist[1] || isNoSnap && isWidth) {\n        nowDist[0] += snapDist[0];\n        var snapHeight = getKeepRatioHeight(width * nowDist[0] * startScale[0], isWidth, ratio);\n        nowDist[1] = snapHeight / height / startScale[1];\n      } else if (!direction[0] && direction[1] || !snapDist[0] && snapDist[1] || isNoSnap && !isWidth) {\n        nowDist[1] += snapDist[1];\n        var snapWidth = getKeepRatioWidth(height * nowDist[1] * startScale[1], isWidth, ratio);\n        nowDist[0] = snapWidth / width / startScale[0];\n      }\n    } else {\n      if (!snapDist[0]) {\n        nowDist[0] = throttle(nowDist[0] * startScale[0], throttleScale) / startScale[0];\n      }\n\n      if (!snapDist[1]) {\n        nowDist[1] = throttle(nowDist[1] * startScale[1], throttleScale) / startScale[1];\n      }\n    }\n\n    if (nowDist[0] === 0) {\n      nowDist[0] = (prevDist[0] > 0 ? 1 : -1) * MIN_SCALE;\n    }\n\n    if (nowDist[1] === 0) {\n      nowDist[1] = (prevDist[1] > 0 ? 1 : -1) * MIN_SCALE;\n    }\n\n    var delta = [nowDist[0] / prevDist[0], nowDist[1] / prevDist[1]];\n    scale = multiply2(nowDist, startScale);\n    datas.prevDist = nowDist;\n\n    if (scaleX === prevDist[0] && scaleY === prevDist[1] && !parentMoveable) {\n      return false;\n    }\n\n    var inverseDelta = !parentFlag && pinchFlag ? [0, 0] : getScaleDist(moveable, delta, direction, dragClient);\n    var params = fillParams(moveable, e, {\n      scale: scale,\n      direction: direction,\n      dist: nowDist,\n      delta: delta,\n      transform: transform + \" scale(\" + scaleX + \", \" + scaleY + \")\",\n      isPinch: !!pinchFlag,\n      drag: Draggable.drag(moveable, setCustomDrag(moveable.state, inverseDelta, inputEvent))\n    });\n    triggerEvent(moveable, \"onScale\", params);\n    return params;\n  },\n  dragControlEnd: function dragControlEnd(moveable, e) {\n    var datas = e.datas,\n        isDrag = e.isDrag;\n\n    if (!datas.isScale) {\n      return false;\n    }\n\n    datas.isScale = false;\n    triggerEvent(moveable, \"onScaleEnd\", fillParams(moveable, e, {\n      isDrag: isDrag\n    }));\n    return isDrag;\n  },\n  dragGroupControlCondition: directionCondition,\n  dragGroupControlStart: function dragGroupControlStart(moveable, e) {\n    var datas = e.datas;\n    var params = this.dragControlStart(moveable, e);\n\n    if (!params) {\n      return false;\n    }\n\n    var direction = params.direction;\n    var startPos = getPosByReverseDirection(getAbsolutePosesByState(moveable.state), direction);\n    var events = triggerChildAble(moveable, this, \"dragControlStart\", datas, function (child, childDatas) {\n      var pos = getPosByReverseDirection(getAbsolutePosesByState(child.state), direction);\n\n      var _a = caculate(createRotateMatrix(-moveable.rotation / 180 * Math.PI, 3), [pos[0] - startPos[0], pos[1] - startPos[1], 1], 3),\n          originalX = _a[0],\n          originalY = _a[1];\n\n      childDatas.originalX = originalX;\n      childDatas.originalY = originalY;\n      return e;\n    });\n\n    var nextParams = _assign({}, params, {\n      targets: moveable.props.targets,\n      events: events\n    });\n\n    var result = triggerEvent(moveable, \"onScaleGroupStart\", nextParams);\n    datas.isScale = result !== false;\n    return datas.isScale ? nextParams : false;\n  },\n  dragGroupControl: function dragGroupControl(moveable, e) {\n    var datas = e.datas;\n\n    if (!datas.isScale) {\n      return;\n    }\n\n    var params = this.dragControl(moveable, e);\n\n    if (!params) {\n      return;\n    }\n\n    var scale = params.scale,\n        direction = params.direction,\n        dist = params.dist;\n    var prevPos = getPosByReverseDirection(getAbsolutePosesByState(moveable.state), multiply2(direction, dist));\n    var events = triggerChildAble(moveable, this, \"dragControl\", datas, function (_, childDatas) {\n      var _a = caculate(createRotateMatrix(moveable.rotation / 180 * Math.PI, 3), [childDatas.originalX * scale[0], childDatas.originalY * scale[1], 1], 3),\n          clientX = _a[0],\n          clientY = _a[1];\n\n      return _assign({}, e, {\n        parentScale: scale,\n        dragClient: plus(prevPos, [clientX, clientY])\n      });\n    });\n\n    var nextParams = _assign({\n      targets: moveable.props.targets,\n      events: events\n    }, params);\n\n    triggerEvent(moveable, \"onScaleGroup\", nextParams);\n    return nextParams;\n  },\n  dragGroupControlEnd: function dragGroupControlEnd(moveable, e) {\n    var isDrag = e.isDrag,\n        datas = e.datas;\n\n    if (!datas.isScale) {\n      return;\n    }\n\n    this.dragControlEnd(moveable, e);\n    triggerChildAble(moveable, this, \"dragControlEnd\", datas, e);\n    var nextParams = fillParams(moveable, e, {\n      targets: moveable.props.targets,\n      isDrag: isDrag\n    });\n    triggerEvent(moveable, \"onScaleGroupEnd\", nextParams);\n    return isDrag;\n  }\n};\n\nfunction getMiddleLinePos(pos1, pos2) {\n  return pos1.map(function (pos, i) {\n    return dot(pos, pos2[i], 1, 2);\n  });\n}\n\nfunction getTriangleRad(pos1, pos2, pos3) {\n  // pos1 Rad\n  var rad1 = getRad(pos1, pos2);\n  var rad2 = getRad(pos1, pos3);\n  var rad = rad2 - rad1;\n  return rad >= 0 ? rad : rad + 2 * Math.PI;\n}\n\nfunction isValidPos(poses1, poses2) {\n  var rad1 = getTriangleRad(poses1[0], poses1[1], poses1[2]);\n  var rad2 = getTriangleRad(poses2[0], poses2[1], poses2[2]);\n  var pi = Math.PI;\n\n  if (rad1 >= pi && rad2 <= pi || rad1 <= pi && rad2 >= pi) {\n    return false;\n  }\n\n  return true;\n}\n\nvar Warpable = {\n  name: \"warpable\",\n  ableGroup: \"size\",\n  render: function render(moveable, React) {\n    var _a = moveable.props,\n        resizable = _a.resizable,\n        scalable = _a.scalable,\n        warpable = _a.warpable;\n\n    if (resizable || scalable || !warpable) {\n      return;\n    }\n\n    var _b = moveable.state,\n        pos1 = _b.pos1,\n        pos2 = _b.pos2,\n        pos3 = _b.pos3,\n        pos4 = _b.pos4;\n    var linePosFrom1 = getMiddleLinePos(pos1, pos2);\n    var linePosFrom2 = getMiddleLinePos(pos2, pos1);\n    var linePosFrom3 = getMiddleLinePos(pos1, pos3);\n    var linePosFrom4 = getMiddleLinePos(pos3, pos1);\n    var linePosTo1 = getMiddleLinePos(pos3, pos4);\n    var linePosTo2 = getMiddleLinePos(pos4, pos3);\n    var linePosTo3 = getMiddleLinePos(pos2, pos4);\n    var linePosTo4 = getMiddleLinePos(pos4, pos2);\n    return [React.createElement(\"div\", {\n      className: prefix(\"line\"),\n      key: \"middeLine1\",\n      style: getLineStyle(linePosFrom1, linePosTo1)\n    }), React.createElement(\"div\", {\n      className: prefix(\"line\"),\n      key: \"middeLine2\",\n      style: getLineStyle(linePosFrom2, linePosTo2)\n    }), React.createElement(\"div\", {\n      className: prefix(\"line\"),\n      key: \"middeLine3\",\n      style: getLineStyle(linePosFrom3, linePosTo3)\n    }), React.createElement(\"div\", {\n      className: prefix(\"line\"),\n      key: \"middeLine4\",\n      style: getLineStyle(linePosFrom4, linePosTo4)\n    })].concat(renderAllDirections(moveable, React));\n  },\n  dragControlCondition: function dragControlCondition(target) {\n    return hasClass(target, prefix(\"direction\"));\n  },\n  dragControlStart: function dragControlStart(moveable, e) {\n    var datas = e.datas,\n        inputEvent = e.inputEvent;\n    var target = moveable.props.target;\n    var inputTarget = inputEvent.target;\n    var direction = getDirection(inputTarget);\n\n    if (!direction || !target) {\n      return false;\n    }\n\n    var state = moveable.state;\n    var transformOrigin = state.transformOrigin,\n        is3d = state.is3d,\n        targetTransform = state.targetTransform,\n        targetMatrix = state.targetMatrix,\n        width = state.width,\n        height = state.height,\n        left = state.left,\n        top = state.top;\n    datas.datas = {};\n    datas.targetTransform = targetTransform;\n    datas.warpTargetMatrix = is3d ? targetMatrix : convertDimension(targetMatrix, 3, 4);\n    datas.targetInverseMatrix = ignoreDimension(invert(datas.warpTargetMatrix, 4), 3, 4);\n    datas.direction = direction;\n    datas.left = left;\n    datas.top = top;\n    setDragStart(moveable, {\n      datas: datas\n    });\n    datas.poses = [[0, 0], [width, 0], [0, height], [width, height]].map(function (p, i) {\n      return minus(p, transformOrigin);\n    });\n    datas.nextPoses = datas.poses.map(function (_a) {\n      var x = _a[0],\n          y = _a[1];\n      return caculate(datas.warpTargetMatrix, [x, y, 0, 1], 4);\n    });\n    datas.startMatrix = createIdentityMatrix(4);\n    datas.prevMatrix = createIdentityMatrix(4);\n    datas.absolutePoses = getAbsolutePosesByState(state);\n    datas.posIndexes = getPosIndexesByDirection(direction);\n    state.snapDirection = direction;\n    var params = fillParams(moveable, e, {\n      set: function set(matrix) {\n        datas.startMatrix = matrix;\n      }\n    });\n    var result = triggerEvent(moveable, \"onWarpStart\", params);\n\n    if (result !== false) {\n      datas.isWarp = true;\n    }\n\n    return result;\n  },\n  dragControl: function dragControl(moveable, e) {\n    var datas = e.datas;\n    var distX = e.distX,\n        distY = e.distY;\n    var targetInverseMatrix = datas.targetInverseMatrix,\n        prevMatrix = datas.prevMatrix,\n        isWarp = datas.isWarp,\n        startMatrix = datas.startMatrix,\n        poses = datas.poses,\n        posIndexes = datas.posIndexes,\n        absolutePoses = datas.absolutePoses;\n\n    if (!isWarp) {\n      return false;\n    }\n\n    if (hasGuidelines(moveable, \"warpable\")) {\n      var selectedPoses = posIndexes.map(function (index) {\n        return absolutePoses[index];\n      });\n\n      if (selectedPoses.length > 1) {\n        selectedPoses.push([(selectedPoses[0][0] + selectedPoses[1][0]) / 2, (selectedPoses[0][1] + selectedPoses[1][1]) / 2]);\n      }\n\n      var snapInfos = checkSnapPoses(moveable, selectedPoses.map(function (pos) {\n        return pos[0] + distX;\n      }), selectedPoses.map(function (pos) {\n        return pos[1] + distY;\n      }));\n      var horizontalOffset = snapInfos.horizontal.offset,\n          verticalOffset = snapInfos.vertical.offset;\n      distY -= horizontalOffset;\n      distX -= verticalOffset;\n    }\n\n    var dist = getDragDist({\n      datas: datas,\n      distX: distX,\n      distY: distY\n    }, true);\n    var nextPoses = datas.nextPoses.slice();\n    posIndexes.forEach(function (index) {\n      nextPoses[index] = plus(nextPoses[index], dist);\n    });\n\n    if (!NEARBY_POS.every(function (nearByPoses) {\n      return isValidPos(nearByPoses.map(function (i) {\n        return poses[i];\n      }), nearByPoses.map(function (i) {\n        return nextPoses[i];\n      }));\n    })) {\n      return false;\n    }\n\n    var h = createWarpMatrix(poses[0], poses[1], poses[2], poses[3], nextPoses[0], nextPoses[1], nextPoses[2], nextPoses[3]);\n\n    if (!h.length) {\n      return false;\n    }\n\n    var matrix = convertMatrixtoCSS(multiply(targetInverseMatrix, h, 4));\n    var transform = datas.targetTransform + \" matrix3d(\" + matrix.join(\",\") + \")\";\n    var delta = multiplyCSS(invert(prevMatrix, 4), matrix, 4);\n    datas.prevMatrix = matrix;\n    triggerEvent(moveable, \"onWarp\", fillParams(moveable, e, {\n      delta: delta,\n      matrix: multiplyCSS(startMatrix, matrix, 4),\n      multiply: multiplyCSS,\n      dist: matrix,\n      transform: transform\n    }));\n    return true;\n  },\n  dragControlEnd: function dragControlEnd(moveable, e) {\n    var datas = e.datas,\n        isDrag = e.isDrag;\n\n    if (!datas.isWarp) {\n      return false;\n    }\n\n    datas.isWarp = false;\n    triggerEvent(moveable, \"onWarpEnd\", fillParams(moveable, e, {\n      isDrag: isDrag\n    }));\n    return isDrag;\n  }\n};\nvar AREA = prefix(\"area\");\nvar AREA_PIECES = prefix(\"area-pieces\");\nvar AREA_PIECE = prefix(\"area-piece\");\nvar AVOID = prefix(\"avoid\");\n\nfunction restoreStyle(moveable) {\n  var el = moveable.areaElement;\n  var _a = moveable.state,\n      width = _a.width,\n      height = _a.height;\n  removeClass(el, AVOID);\n  el.style.cssText += \"left: 0px; top: 0px; width: \" + width + \"px; height: \" + height + \"px\";\n}\n\nfunction renderPieces(React) {\n  return React.createElement(\"div\", {\n    key: \"area_pieces\",\n    className: AREA_PIECES\n  }, React.createElement(\"div\", {\n    className: AREA_PIECE\n  }), React.createElement(\"div\", {\n    className: AREA_PIECE\n  }), React.createElement(\"div\", {\n    className: AREA_PIECE\n  }), React.createElement(\"div\", {\n    className: AREA_PIECE\n  }));\n}\n\nvar DragArea = {\n  name: \"dragArea\",\n  render: function render(moveable, React) {\n    var _a = moveable.props,\n        target = _a.target,\n        dragArea = _a.dragArea,\n        groupable = _a.groupable;\n    var _b = moveable.state,\n        width = _b.width,\n        height = _b.height,\n        pos1 = _b.pos1,\n        pos2 = _b.pos2,\n        pos3 = _b.pos3,\n        pos4 = _b.pos4;\n\n    if (groupable) {\n      return [React.createElement(\"div\", {\n        key: \"area\",\n        ref: ref(moveable, \"areaElement\"),\n        className: AREA\n      }), renderPieces(React)];\n    }\n\n    if (!target || !dragArea) {\n      return [];\n    }\n\n    var h = createWarpMatrix([0, 0], [width, 0], [0, height], [width, height], pos1, pos2, pos3, pos4);\n    var transform = h.length ? \"matrix3d(\" + convertMatrixtoCSS(h).join(\",\") + \")\" : \"none\";\n    return [React.createElement(\"div\", {\n      key: \"area\",\n      ref: ref(moveable, \"areaElement\"),\n      className: AREA,\n      style: {\n        top: \"0px\",\n        left: \"0px\",\n        width: width + \"px\",\n        height: height + \"px\",\n        transformOrigin: \"0 0\",\n        transform: transform\n      }\n    }), renderPieces(React)];\n  },\n  dragStart: function dragStart(moveable, _a) {\n    var datas = _a.datas,\n        clientX = _a.clientX,\n        clientY = _a.clientY,\n        inputEvent = _a.inputEvent;\n    datas.isDragArea = false;\n    datas.inputTarget = inputEvent.target;\n    var areaElement = moveable.areaElement;\n    var _b = moveable.state.clientRect,\n        left = _b.left,\n        top = _b.top,\n        width = _b.width,\n        height = _b.height;\n    var posX = clientX - left;\n    var posY = clientY - top;\n    var rects = [{\n      left: 0,\n      top: 0,\n      width: width,\n      height: posY - 10\n    }, {\n      left: 0,\n      top: 0,\n      width: posX - 10,\n      height: height\n    }, {\n      left: 0,\n      top: posY + 10,\n      width: width,\n      height: height - posY - 10\n    }, {\n      left: posX + 10,\n      top: 0,\n      width: width - posX - 10,\n      height: height\n    }];\n    var children = [].slice.call(areaElement.nextElementSibling.children);\n    rects.forEach(function (rect, i) {\n      children[i].style.cssText = \"left: \" + rect.left + \"px;top: \" + rect.top + \"px; width: \" + rect.width + \"px; height: \" + rect.height + \"px;\";\n    });\n    addClass(areaElement, AVOID);\n  },\n  drag: function drag(moveable, _a) {\n    var datas = _a.datas;\n\n    if (!datas.isDragArea) {\n      datas.isDragArea = true;\n      restoreStyle(moveable);\n    }\n  },\n  dragEnd: function dragEnd(moveable, e) {\n    var inputEvent = e.inputEvent,\n        isDragArea = e.isDragArea,\n        datas = e.datas;\n\n    if (!datas.isDragArea) {\n      restoreStyle(moveable);\n    }\n\n    var target = moveable.state.target;\n    var inputTarget = inputEvent.target;\n\n    if (isDragArea || moveable.isMoveableElement(inputTarget)) {\n      return;\n    }\n\n    var containsTarget = target.contains(inputTarget);\n    triggerEvent(moveable, \"onClick\", fillParams(moveable, e, {\n      inputTarget: inputTarget,\n      isTarget: target === inputTarget,\n      containsTarget: containsTarget\n    }));\n  },\n  dragGroupStart: function dragGroupStart(moveable, e) {\n    this.dragStart(moveable, e);\n  },\n  dragGroup: function dragGroup(moveable, e) {\n    this.drag(moveable, e);\n  },\n  dragGroupEnd: function dragGroupEnd(moveable, e) {\n    var inputEvent = e.inputEvent,\n        isDragArea = e.isDragArea,\n        datas = e.datas;\n\n    if (!isDragArea) {\n      restoreStyle(moveable);\n    }\n\n    var prevInputTarget = datas.inputTarget;\n    var inputTarget = inputEvent.target;\n\n    if (isDragArea || moveable.isMoveableElement(inputTarget) || prevInputTarget === inputTarget) {\n      return;\n    }\n\n    var targets = moveable.props.targets;\n    var targetIndex = targets.indexOf(inputTarget);\n    var isTarget = targetIndex > -1;\n    var containsTarget = false;\n\n    if (targetIndex === -1) {\n      targetIndex = findIndex(targets, function (parentTarget) {\n        return parentTarget.contains(inputTarget);\n      });\n      containsTarget = targetIndex > -1;\n    }\n\n    triggerEvent(moveable, \"onClickGroup\", fillParams(moveable, e, {\n      targets: targets,\n      inputTarget: inputTarget,\n      targetIndex: targetIndex,\n      isTarget: isTarget,\n      containsTarget: containsTarget\n    }));\n  }\n};\nvar Origin = {\n  name: \"origin\",\n  render: function render(moveable, React) {\n    if (!moveable.props.origin) {\n      return null;\n    }\n\n    var beforeOrigin = moveable.state.beforeOrigin;\n    return [React.createElement(\"div\", {\n      className: prefix(\"control\", \"origin\"),\n      style: getControlTransform(beforeOrigin),\n      key: \"beforeOrigin\"\n    })];\n  }\n};\n\nfunction getDefaultScrollPosition(e) {\n  var scrollContainer = e.scrollContainer;\n  return [scrollContainer.scrollLeft, scrollContainer.scrollTop];\n}\n\nvar Scrollable = {\n  name: \"scrollable\",\n  canPinch: true,\n  dragStart: function dragStart(moveable, e) {\n    var props = moveable.props;\n    var _a = props.scrollContainer,\n        scrollContainer = _a === void 0 ? props.container || document.body : _a;\n    var scrollClientRect = scrollContainer.getBoundingClientRect();\n    var datas = e.datas;\n    datas.scrollContainer = scrollContainer;\n    datas.scrollRect = {\n      left: scrollClientRect.left,\n      top: scrollClientRect.top,\n      width: scrollClientRect.width,\n      height: scrollClientRect.height\n    };\n    datas.isScroll = true;\n  },\n  drag: function drag(moveable, e) {\n    this.checkScroll(moveable, e);\n  },\n  dragEnd: function dragEnd(moveable, e) {\n    e.datas.isScroll = false;\n  },\n  dragGroupStart: function dragGroupStart(moveable, e) {\n    this.dragStart(moveable, e);\n  },\n  dragGroup: function dragGroup(moveable, e) {\n    this.drag(moveable, _assign({}, e, {\n      targets: moveable.props.targets\n    }));\n  },\n  dragGroupEnd: function dragGroupEnd(moveable, e) {\n    this.dragEnd(moveable, e);\n  },\n  checkScroll: function checkScroll(moveable, e) {\n    var datas = e.datas,\n        inputEvent = e.inputEvent,\n        clientX = e.clientX,\n        clientY = e.clientY,\n        isScroll = e.isScroll,\n        targets = e.targets;\n\n    if (!datas.isScroll) {\n      return;\n    }\n\n    if (!isScroll) {\n      datas.prevClientX = clientX;\n      datas.prevClientY = clientY;\n    }\n\n    var _a = moveable.props,\n        _b = _a.scrollThreshold,\n        scrollThreshold = _b === void 0 ? 0 : _b,\n        _c = _a.getScrollPosition,\n        getScrollPosition = _c === void 0 ? getDefaultScrollPosition : _c;\n    var scrollContainer = datas.scrollContainer,\n        scrollRect = datas.scrollRect;\n    var direction = [0, 0];\n\n    if (scrollRect.top > clientY - scrollThreshold) {\n      direction[1] = -1;\n    } else if (scrollRect.top + scrollRect.height < clientY + scrollThreshold) {\n      direction[1] = 1;\n    }\n\n    if (scrollRect.left > clientX - scrollThreshold) {\n      direction[0] = -1;\n    } else if (scrollRect.left + scrollRect.width < clientX + scrollThreshold) {\n      direction[0] = 1;\n    }\n\n    if (!direction[0] && !direction[1]) {\n      return;\n    }\n\n    var pos = getScrollPosition({\n      scrollContainer: scrollContainer,\n      direction: direction\n    });\n    var params = fillParams(moveable, e, {\n      scrollContainer: scrollContainer,\n      direction: direction\n    });\n    var eventName = targets ? \"onScrollGroup\" : \"onScroll\";\n\n    if (targets) {\n      params.targets = targets;\n    }\n\n    triggerEvent(moveable, eventName, params);\n    requestAnimationFrame(function () {\n      if (datas.prevClientX !== clientX || datas.prevClientY !== clientY) {\n        return;\n      }\n\n      var nextPos = getScrollPosition({\n        scrollContainer: scrollContainer,\n        direction: direction\n      });\n      var offsetX = nextPos[0] - pos[0];\n      var offsetY = nextPos[1] - pos[1];\n\n      if (!offsetX && !offsetY) {\n        return;\n      }\n\n      moveable.targetDragger.scrollBy(direction[0] ? offsetX : 0, direction[1] ? offsetY : 0, inputEvent, false);\n      setTimeout(function () {\n        if (datas.prevClientX !== clientX || datas.prevClientY !== clientY) {\n          return;\n        }\n\n        moveable.targetDragger.onDrag(inputEvent, true);\n      }, 10);\n    });\n  }\n};\nvar MOVEABLE_ABLES = [Snappable, Pinchable, Draggable, Rotatable, Resizable, Scalable, Warpable, Scrollable, DragArea, Origin];\nvar Groupable = {\n  name: \"groupable\",\n  render: function render(moveable, React) {\n    var targets = moveable.props.targets || [];\n    moveable.moveables = [];\n    var _a = moveable.state,\n        left = _a.left,\n        top = _a.top;\n    var position = {\n      left: left,\n      top: top\n    };\n    return targets.map(function (target, i) {\n      return React.createElement(MoveableManager, {\n        key: i,\n        ref: refs(moveable, \"moveables\", i),\n        target: target,\n        origin: false,\n        parentMoveable: moveable,\n        parentPosition: position\n      });\n    }).slice();\n  }\n};\n\nfunction getMaxPos(poses, index) {\n  return Math.max.apply(Math, poses.map(function (_a) {\n    var pos1 = _a[0],\n        pos2 = _a[1],\n        pos3 = _a[2],\n        pos4 = _a[3];\n    return Math.max(pos1[index], pos2[index], pos3[index], pos4[index]);\n  }));\n}\n\nfunction getMinPos(poses, index) {\n  return Math.min.apply(Math, poses.map(function (_a) {\n    var pos1 = _a[0],\n        pos2 = _a[1],\n        pos3 = _a[2],\n        pos4 = _a[3];\n    return Math.min(pos1[index], pos2[index], pos3[index], pos4[index]);\n  }));\n}\n\nfunction getGroupRect(moveables, rotation) {\n  if (!moveables.length) {\n    return [0, 0, 0, 0];\n  }\n\n  var moveablePoses = moveables.map(function (_a) {\n    var state = _a.state;\n    return getAbsolutePosesByState(state);\n  });\n  var minX = MAX_NUM;\n  var minY = MAX_NUM;\n  var groupWidth = 0;\n  var groupHeight = 0;\n  var fixedRotation = throttle(rotation, TINY_NUM);\n\n  if (fixedRotation % 90) {\n    var rad_1 = rotation / 180 * Math.PI;\n    var a1_1 = Math.tan(rad_1);\n    var a2_1 = -1 / a1_1;\n    var b1s_1 = [MIN_NUM, MAX_NUM];\n    var b2s_1 = [MIN_NUM, MAX_NUM];\n    moveablePoses.forEach(function (poses) {\n      poses.forEach(function (pos) {\n        // ax + b = y\n        // ㅠ = y - ax\n        var b1 = pos[1] - a1_1 * pos[0];\n        var b2 = pos[1] - a2_1 * pos[0];\n        b1s_1[0] = Math.max(b1s_1[0], b1);\n        b1s_1[1] = Math.min(b1s_1[1], b1);\n        b2s_1[0] = Math.max(b2s_1[0], b2);\n        b2s_1[1] = Math.min(b2s_1[1], b2);\n      });\n    });\n    b1s_1.forEach(function (b1) {\n      // a1x + b1 = a2x + b2\n      b2s_1.forEach(function (b2) {\n        // (a1 - a2)x = b2 - b1\n        var x = (b2 - b1) / (a1_1 - a2_1);\n        var y = a1_1 * x + b1;\n        minX = Math.min(minX, x);\n        minY = Math.min(minY, y);\n      });\n    });\n    var rotatePoses = moveablePoses.map(function (_a) {\n      var pos1 = _a[0],\n          pos2 = _a[1],\n          pos3 = _a[2],\n          pos4 = _a[3];\n      return [rotate(pos1, -rad_1), rotate(pos2, -rad_1), rotate(pos3, -rad_1), rotate(pos4, -rad_1)];\n    });\n    groupWidth = getMaxPos(rotatePoses, 0) - getMinPos(rotatePoses, 0);\n    groupHeight = getMaxPos(rotatePoses, 1) - getMinPos(rotatePoses, 1);\n  } else {\n    minX = getMinPos(moveablePoses, 0);\n    minY = getMinPos(moveablePoses, 1);\n    groupWidth = getMaxPos(moveablePoses, 0) - minX;\n    groupHeight = getMaxPos(moveablePoses, 1) - minY;\n\n    if (fixedRotation % 180) {\n      var changedWidth = groupWidth;\n      groupWidth = groupHeight;\n      groupHeight = changedWidth;\n    }\n  }\n\n  return [minX, minY, groupWidth, groupHeight];\n}\n\nvar MoveableGroup = /*#__PURE__*/function (_super) {\n  __extends(MoveableGroup, _super);\n\n  function MoveableGroup() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.differ = new ChildrenDiffer();\n    _this.moveables = [];\n    _this.rotation = 0;\n    return _this;\n  }\n\n  var __proto = MoveableGroup.prototype;\n\n  __proto.updateEvent = function (prevProps) {\n    var state = this.state;\n    var props = this.props;\n\n    if (!state.target) {\n      state.target = this.areaElement;\n      this.controlBox.getElement().style.display = \"block\";\n      this.targetDragger = getAbleDragger(this, state.target, \"targetAbles\", \"Group\");\n      this.controlDragger = getAbleDragger(this, this.controlBox.getElement(), \"controlAbles\", \"GroupControl\");\n    }\n\n    var isContainerChanged = prevProps.container !== props.container;\n\n    if (isContainerChanged) {\n      state.container = props.container;\n    }\n\n    var _a = this.differ.update(props.targets),\n        added = _a.added,\n        changed = _a.changed,\n        removed = _a.removed;\n\n    if (isContainerChanged || added.length || changed.length || removed.length) {\n      this.updateRect();\n    }\n  };\n\n  __proto.checkUpdate = function () {\n    this.updateAbles();\n  };\n\n  __proto.updateRect = function (type, isTarget, isSetState) {\n    var _a;\n\n    if (isSetState === void 0) {\n      isSetState = true;\n    }\n\n    if (!this.controlBox) {\n      return;\n    }\n\n    this.moveables.forEach(function (moveable) {\n      moveable.updateRect(type, false, false);\n    });\n    var state = this.state;\n    var target = state.target || this.props.target;\n\n    if (!isTarget || type !== \"\" && this.props.updateGroup) {\n      // reset rotataion\n      this.rotation = 0;\n    }\n\n    var rotation = this.rotation;\n\n    var _b = getGroupRect(this.moveables, rotation),\n        left = _b[0],\n        top = _b[1],\n        width = _b[2],\n        height = _b[3]; // tslint:disable-next-line: max-line-length\n\n\n    target.style.cssText += \"left:0px;top:0px;width:\" + width + \"px; height:\" + height + \"px;transform:rotate(\" + rotation + \"deg)\";\n    state.width = width;\n    state.height = height;\n    var info = getTargetInfo(target, this.controlBox.getElement(), this.getContainer(), state);\n    var pos = [info.left, info.top];\n    _a = getAbsolutePosesByState(info), info.pos1 = _a[0], info.pos2 = _a[1], info.pos3 = _a[2], info.pos4 = _a[3];\n    info.origin = plus(pos, info.origin);\n    info.beforeOrigin = plus(pos, info.beforeOrigin);\n    var clientRect = info.clientRect;\n    clientRect.top += top - info.top - state.top;\n    clientRect.left += left - info.left - state.left;\n    this.updateState(_assign({}, info, {\n      left: left - info.left,\n      top: top - info.top\n    }), isSetState);\n  };\n\n  __proto.triggerEvent = function (name, e) {\n    if (name.indexOf(\"Group\") > -1) {\n      return _super.prototype.triggerEvent.call(this, name, e);\n    }\n  };\n\n  __proto.updateAbles = function () {\n    _super.prototype.updateAbles.call(this, this.props.ables.concat([Groupable]), \"Group\");\n  };\n\n  MoveableGroup.defaultProps = _assign({}, MoveableManager.defaultProps, {\n    transformOrigin: [\"50%\", \"50%\"],\n    groupable: true,\n    dragArea: true,\n    keepRatio: true,\n    targets: []\n  });\n  return MoveableGroup;\n}(MoveableManager);\n\nvar Moveable = /*#__PURE__*/function (_super) {\n  __extends(Moveable, _super);\n\n  function Moveable() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  var __proto = Moveable.prototype;\n\n  __proto.render = function () {\n    var props = this.props;\n    var ables = props.ables || [];\n    var target = this.props.target || this.props.targets;\n    var isArr = isArray(target);\n    var isGroup = isArr && target.length > 1;\n\n    if (isGroup) {\n      var nextProps = _assign({}, this.props, {\n        target: null,\n        targets: target,\n        ables: MOVEABLE_ABLES.concat([Groupable], ables)\n      });\n\n      return createElement(MoveableGroup, _assign({\n        key: \"group\",\n        ref: ref(this, \"moveable\")\n      }, nextProps));\n    } else {\n      var moveableTarget = isArr ? target[0] : target;\n      return createElement(MoveableManager, _assign({\n        key: \"single\",\n        ref: ref(this, \"moveable\")\n      }, _assign({}, this.props, {\n        target: moveableTarget,\n        ables: MOVEABLE_ABLES.concat(ables)\n      })));\n    }\n  };\n\n  __proto.isMoveableElement = function (target) {\n    return this.moveable.isMoveableElement(target);\n  };\n\n  __proto.dragStart = function (e) {\n    this.moveable.dragStart(e);\n  };\n\n  __proto.isInside = function (clientX, clientY) {\n    return this.moveable.isInside(clientX, clientY);\n  };\n\n  __proto.updateRect = function () {\n    this.moveable.updateRect();\n  };\n\n  __proto.updateTarget = function () {\n    this.moveable.updateTarget();\n  };\n\n  __proto.getRect = function () {\n    return this.moveable.getRect();\n  };\n\n  __proto.destroy = function () {\n    this.moveable.componentWillUnmount();\n  };\n\n  return Moveable;\n}(PureComponent);\n\nexport default Moveable;","map":null,"metadata":{},"sourceType":"module"}